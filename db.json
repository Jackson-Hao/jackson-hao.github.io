{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"5bd196f89dbd35f36edf45da1a2c9ea5951f148f","modified":1716732407732},{"_id":"source/_posts/C.md","hash":"f0208e6242a559ab6fb7310921ad10cc6c6cc55c","modified":1716733401863},{"_id":"source/_posts/java.md","hash":"4b10ea72d551c7555bb146459ffdbe140fdc816b","modified":1716732161147},{"_id":"source/_posts/送东阳马生序.md","hash":"4747ad9a2a3f88663dcb4542c7fbc4154eb380dd","modified":1716733490755},{"_id":"source/tags/index.md","hash":"98ca70259bdade3eb721bac3ccbee7c2cc754f36","modified":1716732412134},{"_id":"source/categories/index.md","hash":"7bd344b3b41d4ed889c45b128bb5ea62942de045","modified":1716732357351},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1716729690294},{"_id":"themes/butterfly/README.md","hash":"4e01b47448d9f3a02afc04eef644e2321253f6f4","modified":1716729690295},{"_id":"themes/butterfly/README_CN.md","hash":"148da187d16033624ceccce8b8561835296f5a5a","modified":1716729690295},{"_id":"themes/butterfly/_config.yml","hash":"9865faf9ab54fe557619729ecf2a95fe77112acb","modified":1716737000947},{"_id":"themes/butterfly/package.json","hash":"314b0271ba3f668d0d6081b499b2d24e90dab25e","modified":1716729690316},{"_id":"themes/butterfly/languages/default.yml","hash":"90a6dc361de67532437d819a55ec64945ca5404b","modified":1716729690296},{"_id":"themes/butterfly/plugins.yml","hash":"d807fbb62163bb6fc5a83a24ebd69ac14cf45f67","modified":1716729690316},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"5004faee365139521f161babd66649a8107e4008","modified":1716729690296},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1716729690293},{"_id":"themes/butterfly/languages/en.yml","hash":"af5603b1a888f167dc80be6d53a19437b5cf6bef","modified":1716729690296},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"03629d1d13a7be09d4933aa5dc0dcbe45e79140c","modified":1716729690296},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1716729690315},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1716729690297},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1716729690315},{"_id":"themes/butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1716729690296},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1716729690315},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1716729690315},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1716729690293},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"6e34b565ea013812d5e363b6de5fa1f9078d4e12","modified":1716729690293},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1716729690294},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1716729690294},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1716729690294},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1716729690297},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1716729690297},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ecec62305aaa596bb1dfbb46c13d06fb5a9628cf","modified":1716729690297},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1716729690297},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1716729690300},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1716729690302},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1716729690302},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1716729690316},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"db275f7fbe4438b54cd813b695f4834e10aa234f","modified":1716729690302},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1716729690316},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"2ac43fd4103ba3c6897da7c13015cb05f39fd695","modified":1716729690317},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1716729690316},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1716729690316},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1716729690317},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1716729690317},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"e196a99733d7f90899bceed5d12488e8234817d5","modified":1716729690317},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1716729690317},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1716729690318},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1716729690318},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"96f861151e3b889ef0ffe78821d489ad2625ee43","modified":1716729690318},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"d5c7e61257b08a9648404f6f48ce4d471cd5fa55","modified":1716729690318},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"e2a8a09bfe47da26eab242a36f516e6c452c799a","modified":1716729690318},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1716729690319},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"821e973d41f7b3b64cde91e0e836ea49c43e3c06","modified":1716729690319},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"93229d44b35b9da92e647b89d6d3087085974a29","modified":1716729690319},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1716729690319},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1716729690319},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"19773218877281ccffed921431e87148413a7c20","modified":1716729690320},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1716729690320},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1716729690320},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"418684993a3a3a2ac534257a2d9ecbcead6808c1","modified":1716729690319},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1716729690320},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"4526c75e5bf84609d67e92b6af3524bcb278e852","modified":1716729690321},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1716729690320},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"ffc62222f8d7b4d44c1c0726c8a08824a2201039","modified":1716729690321},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"830b1d592278b9f676df0cf9a91b1eeda2456aec","modified":1716729690320},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1716729690330},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1716729690332},{"_id":"themes/butterfly/source/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1716729690331},{"_id":"themes/butterfly/source/css/var.styl","hash":"152b6bd4b6285165541a71f5a1c913f8ee6a602b","modified":1716729690330},{"_id":"themes/butterfly/source/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1716729690332},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1716729690330},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1716729690298},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1716729690331},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1716729690298},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1716729690331},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"63fed4548367a3663cdbaffa1df48167b0a2397b","modified":1716729690298},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1716729690298},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1716729690298},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1716729690299},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1716729690298},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1716729690299},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1716729690299},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1716729690299},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1716729690299},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"f50e6a17073677933c5bc78481bf587a4a9e6da0","modified":1716729690300},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1716729690300},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1716729690300},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1716729690300},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"5574804fdea5edf7fd52aad2caf030614d5e7f2f","modified":1716729690302},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1716729690302},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1716729690301},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"a096ff8eb6b2a22395be881f827ff2a686ba5596","modified":1716729690302},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1716729690311},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1716729690303},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"12e57491e94fa00d953bbda9db0b6d6169e2358c","modified":1716729690311},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1716729690311},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1716729690312},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1716729690313},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1716729690313},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1716729690313},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1716729690313},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1716729690313},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1716729690314},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1716729690315},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1716729690314},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"f19694a42dbe28eda4b39a1696e8fbcd277bc76c","modified":1716729690321},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"c8ff6ddd5bfe1190b7b8056b68ce41114fd79dcb","modified":1716729690321},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"4dcd468e4d11a0ac75406162678feffcd89fee00","modified":1716729690322},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1716729690323},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1716729690315},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"fad650f88778b33a6358e38cf50dfafc0974d28f","modified":1716729690323},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1716729690323},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"18d08be0cd9b1f8c049d4b922e80f8163a55c947","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1716729690325},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"f845b9b4efdee750f70c023aab27432611f83059","modified":1716729690325},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"a2eb44fa5eaea1325319a2064439cf36d0f35a2f","modified":1716729690324},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"b7a6a585dbc38d177c9aba75df3a467415d0488a","modified":1716729690325},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d6cf26ffb8a0343eda1cde65b6b73b0ddbe8fcfc","modified":1716729690325},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"e549d24ad81a7d93326a509ff8dcfcc58c80729e","modified":1716729690326},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1716729690326},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1716729690325},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"0db591a1f4ed5adcb8668a549bbee5c9d62682cf","modified":1716729690325},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1716729690326},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1716729690326},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1716729690326},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1716729690327},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"d4ebc41b5c855dd75f47de7345d62f85ce7cf073","modified":1716729690327},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1716729690327},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1716729690327},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1716729690327},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"961589da3c0a532c4709a4a4ea96bd579257f766","modified":1716729690328},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1716729690328},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"5cddbb5f4eae695a26685e415d821b523e0f17bf","modified":1716729690328},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1716729690328},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1716729690329},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1716729690329},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1716729690329},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1716729690329},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"2d02e52b360f6e6cae47c293ae57ed78e2554663","modified":1716729690329},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1716729690329},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1716729690330},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1716729690332},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1716729690332},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"f7299f9fef5bf94bb58c8cd3be8ee660ad2f9cd4","modified":1716729690303},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1716729690303},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1716729690303},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1716729690304},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1716729690305},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1716729690305},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1716729690305},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1716729690305},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1716729690306},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f77f0fdeac2bc8a72f71a58f9b75aa39f0a108c8","modified":1716729690306},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"62f16a602e57e5f7f7c5249dd37b42d436dc032a","modified":1716729690306},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"3bc4c1b91568561f0491bdac65b75aa0bfd01f27","modified":1716729690306},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"46aec6466959baec1c3d71a5dbc510fbeb00c91d","modified":1716729690306},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"2d7b0b09678adba09481e3152e0b32962677f650","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0d378ee8a671982a46213a4bfb223b4f3409aea9","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"63cea2b5c8f7b59f5919379d61a2bb2ce8ed7623","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1716729690305},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"5c29b5887e2e6cd81e1f13b32da53d9c139b788b","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"1995a654ba7ad62775a0a6e2922209cd1a85f2e3","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"46865e3f52096acb07d0212174b4e8751b123aea","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"7aa443b4881448979b810864e206e58c9ed787e3","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1716729690309},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1716729690308},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1716729690309},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"6b67982bb7a3713b5bffd6a23ba2810425c504d0","modified":1716729690309},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"17080aba1754478197ab089f7948ed900f116d2b","modified":1716729690309},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"2609bc2656aaaa9b59e8d575e711776512a62192","modified":1716729690309},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0f0b46d637a9a1b6ae35148923abecc80b866276","modified":1716729690310},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1716729690310},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"de2c4d02b520dd49a0a59fc0f33295e5bbb2c624","modified":1716729690310},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"4104f96faa6040f111ebfb9a90eeb470857c3b86","modified":1716729690310},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"24804ab6da9727ed793655c1262fa3f1a9746f70","modified":1716729690310},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1716729690311},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"b928be14d1b47a9fadb1bcc5f5072a7328752d4b","modified":1716729690311},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1716729690312},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"f15699abb8c7a255aabad0222ae53eee387c66a3","modified":1716729690307},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"3335024ba91f55ccf3858571b7898f46881c455c","modified":1716729690312},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1716729690312},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"3ba49cfe186e9ca05faf9f0d0113611ec47e9b38","modified":1716729690312},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1716729690312},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1716729690322},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1716729690322},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1716729690322},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1716729690323},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"25914321762e30aacc610bc4dfb9de3e1cb556a3","modified":1716729690323},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"1f9f51023e9e33081c2add2ca73643c0edc5e9d5","modified":1716729690310},{"_id":"public/about/index.html","hash":"82888d23224b6e6650e956ba0a1491c67ba390f6","modified":1716737085285},{"_id":"public/categories/index.html","hash":"c3b5f60381e3e0afe5af6afb6eaf72d1ec189676","modified":1716737085285},{"_id":"public/tags/index.html","hash":"574c10c24b22f2a74cbd9fd172593699f8d05a57","modified":1716737085285},{"_id":"public/2024/05/26/送东阳马生序/index.html","hash":"de5ddbb9e9023da6dcdb6d010357327285fddf6e","modified":1716737085285},{"_id":"public/2024/03/07/C/index.html","hash":"c28549f39040064fc6822cd187cdd5e4bd438d7c","modified":1716737085285},{"_id":"public/2024/03/07/java/index.html","hash":"180219c64685aed4da143c2e69807d098b9948d0","modified":1716737085285},{"_id":"public/archives/index.html","hash":"051634136eca4d4b47d802ee0212e9875e2ce3e2","modified":1716737085285},{"_id":"public/archives/2024/03/index.html","hash":"451ce5884fbb02688b4301b9913c6746850b7c89","modified":1716737085285},{"_id":"public/archives/2024/05/index.html","hash":"782fe69a36ddd267670b829c4339cbd7ea619691","modified":1716737085285},{"_id":"public/archives/2024/index.html","hash":"300df1efec4d6d3981d68258c988ee03413b0079","modified":1716737085285},{"_id":"public/index.html","hash":"3222c750011081399bf0e72eae412bb1248caadc","modified":1716737085285},{"_id":"public/tags/程序设计/index.html","hash":"3c78d278a99d983bf2f67cdae5003aa0839b76c6","modified":1716737085285},{"_id":"public/tags/C语言/index.html","hash":"3dd384fe184265c0a2323eb793ec9704ca8611e0","modified":1716737085285},{"_id":"public/tags/文学/index.html","hash":"843eb6e2c993408899d1091f3012bf00ee271397","modified":1716737085285},{"_id":"public/tags/生活/index.html","hash":"bf4d39b98f557c2591bf5943d6333836428617c4","modified":1716737085285},{"_id":"public/tags/Java/index.html","hash":"4454d117f38c9b782ad6f02e436f7e7294da40cd","modified":1716737085285},{"_id":"public/categories/程序设计/index.html","hash":"af88ecfe819eff8ef06600417d958c905cf0d275","modified":1716737085285},{"_id":"public/categories/文学/index.html","hash":"a8bf78dfebcd7f5aea8d36d6c4fd5c7fbbd9ed32","modified":1716737085285},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1716737085285},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1716737085285},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1716737085285},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1716737085285},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1716737085285},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1716737085285},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1716737085285},{"_id":"public/css/index.css","hash":"64d78e0d484e808904ef94186c9684a70a78de4b","modified":1716737085285},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1716737085285},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1716737085285}],"Category":[{"name":"程序设计","_id":"clwnoxp0m0004zsuhbxgb6gpd"},{"name":"文学","_id":"clwnoxp0p000azsuh0f0a3t9i"}],"Data":[],"Page":[{"title":"关于作者","date":"2024-05-26T14:06:32.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: 关于作者\ndate: 2024-05-26 22:06:32\n---\n","updated":"2024-05-26T14:06:47.732Z","path":"about/index.html","comments":1,"layout":"page","_id":"clwnoxp0g0000zsuh71l137p8","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"分类","date":"2024-05-26T14:03:39.000Z","type":"categories","comments":1,"_content":"\n","source":"categories/index.md","raw":"---\ntitle: \"分类\"\ndate: 2024-05-26 22:03:39\ntype: \"categories\"\ncomments: true\n---\n\n","updated":"2024-05-26T14:05:57.351Z","path":"categories/index.html","layout":"page","_id":"clwnoxp0k0002zsuhc2ipefhw","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""},{"title":"标签","date":"2024-05-26T14:03:39.000Z","type":"tags","comments":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: \"标签\"\ndate: 2024-05-26 22:03:39\ntype: \"tags\"\ncomments: true\n---\n","updated":"2024-05-26T14:06:52.134Z","path":"tags/index.html","layout":"page","_id":"clwnoxp0n0006zsuh6e3uc7r2","content":"","site":{"data":{}},"cover":false,"excerpt":"","more":""}],"Post":[{"title":"C语言程序设计笔记","date":"2024-03-07T12:00:00.000Z","cover":"https://img2.imgtp.com/2024/05/26/wXskEuzZ.jpg","_content":"# C语言程序设计笔记\n---\n## 目录\n- [C语言程序设计笔记](#c语言程序设计笔记)\n  - [目录](#目录)\n  - [前言](#前言)\n  - [程序设计基础](#程序设计基础)\n      - [一个简单C程序](#一个简单c程序)\n  - [C语言的基础数据类型](#c语言的基础数据类型)\n      - [ASCII码](#ascii码)\n      - [完整ASCII码表](#完整ascii码表)\n      - [基本数据类型](#基本数据类型)\n        - [例子：体验实数的误差](#例子体验实数的误差)\n        - [例子：整型数据的溢出](#例子整型数据的溢出)\n        - [例子：无符号输出负数](#例子无符号输出负数)\n      - [常量](#常量)\n      - [变量](#变量)\n        - [例子：数据类型](#例子数据类型)\n  - [整形数据的输入输出](#整形数据的输入输出)\n  - [浮点型数据](#浮点型数据)\n      - [浮点数比大小](#浮点数比大小)\n      - [浮点数修饰](#浮点数修饰)\n      - [字符的输入输出](#字符的输入输出)\n  - [指针](#指针)\n  - [数据类型转换](#数据类型转换)\n  - [输入输出](#输入输出)\n  - [运算符](#运算符)\n    - [算术运算符](#算术运算符)\n    - [关系运算符](#关系运算符)\n    - [逻辑运算符](#逻辑运算符)\n    - [位运算符](#位运算符)\n    - [赋值运算符](#赋值运算符)\n    - [条件运算符](#条件运算符)\n    - [逗号运算符](#逗号运算符)\n    - [优先级和结合性](#优先级和结合性)\n  - [编译预处理](#编译预处理)\n    - [宏定义](#宏定义)\n    - [条件编译](#条件编译)\n    - [文件包含](#文件包含)\n  - [附录](#附录)\n    - [常用函数及其用法总结](#常用函数及其用法总结)\n      - [rand() 与 srand()](#rand-与-srand)\n        - [例题](#例题)\n---\n## 前言\n\n$$没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难$$\n\n---\n## 程序设计基础\n#### 一个简单C程序\n```c\n#include <stdio.h>\nint main(){\n  double r,area; //定义半径和面积\n  printf(\"请输入圆的半径：\");\n  scanf(\"%f\",&r); //&r是取地址符,表示将r的地址传递给scanf函数\n  area = 3.14159*r*r;\n  printf(\"圆的面积是：%.2lf\\n\",area);\n  return 0;\n}\n```\n## C语言的基础数据类型\n#### ASCII码\n- 空格 32\n- 0 48\n- A 65\n- a 97\n#### 完整ASCII码表\n| ASCII值 | 字符 | ASCII值 | 字符 | ASCII值 | 字符 | ASCII值 | 字符 |\n|---------|------|---------|------|---------|------|---------|------|\n| 0       | NUL  | 32      | SP   | 64      | @    | 96      | `    |\n| 1       | SOH  | 33      | !    | 65      | A    | 97      | a    |\n| 2       | STX  | 34      | \"    | 66      | B    | 98      | b    |\n| 3       | ETX  | 35      | #    | 67      | C    | 99      | c    |\n| 4       | EOT  | 36      | $    | 68      | D    | 100     | d    |\n| 5       | ENQ  | 37      | %    | 69      | E    | 101     | e    |\n| 6       | ACK  | 38      | &    | 70      | F    | 102     | f    |\n| 7       | BEL  | 39      | '    | 71      | G    | 103     | g    |\n| 8       | BS   | 40      | (    | 72      | H    | 104     | h    |\n| 9       | HT   | 41      | )    | 73      | I    | 105     | i    |\n| 10      | LF   | 42      | *    | 74      | J    | 106     | j    |\n| 11      | VT   | 43      | +    | 75      | K    | 107     | k    |\n| 12      | FF   | 44      | ,    | 76      | L    | 108     | l    |\n| 13      | CR   | 45      | -    | 77      | M    | 109     | m    |\n| 14      | SO   | 46      | .    | 78      | N    | 110     | n    |\n| 15      | SI   | 47      | /    | 79      | O    | 111     | o    |\n| 16      | DLE  | 48      | 0    | 80      | P    | 112     | p    |\n| 17      | DC1  | 49      | 1    | 81      | Q    | 113     | q    |\n| 18      | DC2  | 50      | 2    | 82      | R    | 114     | r    |\n| 19      | DC3  | 51      | 3    | 83      | S    | 115     | s    |\n| 20      | DC4  | 52      | 4    | 84      | T    | 116     | t    |\n| 21      | NAK  | 53      | 5    | 85      | U    | 117     | u    |\n| 22      | SYN  | 54      | 6    | 86      | V    | 118     | v    |\n| 23      | ETB  | 55      | 7    | 87      | W    | 119     | w    |\n| 24      | CAN  | 56      | 8    | 88      | X    | 120     | x    |\n| 25      | EM   | 57      | 9    | 89      | Y    | 121     | y    |\n| 26      | SUB  | 58      | :    | 90      | Z    | 122     | z    |\n| 27      | ESC  | 59      | ;    | 91      | [    | 123     | {    |\n| 28      | FS   | 60      | <    | 92      | \\    | 124     | \\|   |\n| 29      | GS   | 61      | =    | 93      | ]    | 125     | }    |\n| 30      | RS   | 62      | >    | 94      | ^    | 126     | ~    |\n| 31      | US   | 63      | ?    | 95      | _    | 127     | DEL  |\n\n#### 基本数据类型\n- 基本类型\n  - 整型\n    - 有符号整型\n      - char\n        - 范围：-128~127，对应的格式控制符为%c\n      - short\n      - int\n        - 占用 $2^{32}-1$ 位,从$-2^{31}$到$2^{31}-1$，负数比正数多一个，对应的格式控制符为%d\n      - long\n      - long long\n    - 无符号整型\n      - unsigned char\n      - unsigned short\n      - unsigned int\n        - 取值范围为0~$2^{32}-1$，对应的格式控制符为%u\n      - unsigned long\n      - unsigned long long\n    - **注意：整型和字符型的存储空间大小是平台相关的，可以互相兼容**\n  - 浮点型\n    - 单精度\n      - float\n        - 数的浮点表示形式：阶码和尾数\n          - 阶码：用来表示数的次方，采用补码表示，占用一个字节，阶符位为0表示正数，为1表示负数\n          - 尾数：用来表示数的有效数字，采用补码表示，占用三个字节\n          - 范围$\\pm 3.4*10^{38}$，对应的格式控制符为%f\n    - 双精度\n      - double\n        - 范围$\\pm 1.7*10^{308}$，对应的格式控制符为%lf\n  - 字符型\n  - 枚举型\n- 构造类型\n- 指针类型\n- 空类型\n##### 例子：体验实数的误差\n```c\n#include <stdio.h>\nint main(){\n  float d=3.500001,s;\n  int i=0;\n  int s=0;\n  for (i=0;i<1000000;i++){\n    s+=d;\n  }\n  printf(\"%f\\n\",s); \n  // 如果换成double类型，结果是3500001.000000\n}\n```\n##### 例子：整型数据的溢出\n```c\n#include <stdio.h>\nint main(){\n  int a=2147483647;\n  printf(\"%d\\n\",a+1); //输出结果为-2147483648\n  // 原因：int类型的取值范围为-2147483648~2147483647，加上1之后就会溢出\n  int b=-2147483648;\n  printf(\"%d\\n\",b-1); //输出结果为2147483647\n}\n```\n\n##### 例子：无符号输出负数\n\n```c\n#include <stdio.h>\nint main(){\n  int a=-1;\n  printf(\"%u\\n\",a); //输出结果为4294967295\n  // 原因：-1的补码为11111111 11111111 11111111 11111111，转换为无符号数就是4294967295\n}\n\n```\n#### 常量\n- 常量\n  - 整型常量\n    - 十进制\n    - 八进制\n    - 十六进制\n      - 0x00001\n  - 实型常量\n    - 小数表示\n    - 科学计数法\n      - 2.5e-3，3.2e2\n  - 字符常量\n    - 一般字符常量\n      - 'A'，'a'\n      - 'a'-32='A'，在内存中存储的是ASCII码\n    - 转义常量\n      - \\n 换行\n      - \\t 制表\n        - 8个字符为一个输出区，\\t表示跳到下一个输出区\n      - \\r 回车\n      - \\b 退格\n      - \\f 换页\n      - \\0 空字符\n      - \\ooo 三位八进制\n        - 表示1~377的字符,可以不用前缀0\n      - \\ddd 八进制\n      - \\xhh 十六进制\n      - \\\\\\ 反斜杠\n      - \\0 空字符\n        - 表示0的字符，用\\0比0更直观\n  - 字符串常量\n    - 字符串的存储占用多个字符的存储空间，结尾有一个\\0\n    - 字符串和字符数组的区别\n      - 字符串是字符数组的一种特殊形式，一个字符占用一个字节\n      - 字符串以\\0结尾\n  - 符号常量\n    - #define PI 3.14159\n      - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n      - #define没有数据类型，只是简单的文本替换\n    - const double PI = 3.14159\n      -const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值\n#### 变量\n变量必须先定义后使用，定义变量的格式为：数据类型 变量名;\n符号名空间到逻辑地址，逻辑地址到物理地址\n变量定义的规则：\n- 变量名由字母、数字、下划线组成，不能以数字开头\n  - 如：a1，_a，a_，_1，但是不能是1a\n- 变量名区分大小写\n  - 如：a和A是两个不同的变量\n- 不能使用C语言的关键字作为变量名\n- sizeof()是唯一一个不是函数的运算符，它返回一个变量或者数据类型的字节数\n##### 例子：数据类型\n```c\n#include <stdio.h>\nint main(){\n  printf(\"转义字符：a\\nabc\\bfff\\a\") //输出结果为：a bcfff 一声响铃\n  printf(\"整型常量：%d,%d,%d\\n\",12,012,0x12);\n  printf(\"实型常量：%f,%f\\n\",3.14,3.14e-2);\n  printf(\"字符常量：%c,%c\\n\",'A','\\n');\n  printf(\"字符串常量：%s\\n\",\"Hello,world!\");\n}\n```\n\n## 整形数据的输入输出\n\n输入输出\n- 输入\n  - scanf()\n    - 如果两个数字连续输入，可以使用空格、回车、制表符分隔\n    - 如果两个数字连续输入，可以使用逗号分隔，但是两个数字之间必须加上逗号\n    - 例如：scanf(\"%d,%d\",&a,&b);必须输入1,2，不能输入1 2\n    - **scanf()中有\\n时必须回车**\n- 输出\n  - printf()\n\n## 浮点型数据\n#### 浮点数比大小\n注意：两个浮点数比大小时，**不能直接用==**，因为浮点数在计算机中是以二进制形式存储的，有时候会有误差，使用 $$|a-b|<10^{-6}$$ 来判断两个浮点数是否相等,其中 $10^{-6}$ 是一个机器精度\n#### 浮点数修饰\n- %f\n  - 默认保留6位小数\n  - %.2f保留两位小数\n- %-10.2f\n  - 左对齐，保留两位小数\n- %10.2f\n  - 右对齐，保留两位小数\n\n#### 字符的输入输出\n- 输入\n  - scanf(\"%c%c\",&a,&b);\n    - 如果输入ab，那么a='a',b='b'\n    - 如果输入a b，那么a='a',b=' '\n  - scanf(\"%c %c\",&a,&b);\n    - 如果输入ab，那么a='a',b='b'\n    - 如果输入a b，那么a='a',b='b'\n  - scanf(\"%c,%c\",&a,&b);\n    - 如果输入a,b，那么a='a',b='b'\n  - getchar()\n    - 从键盘输入一个字符，不需要回车\n- 输出\n  - printf(\"%c%c\",a,b);\n    - 输出ab\n  - putchar(a);\n    - 输出a\n## 指针\n- 指针是一个变量，它的值是一个地址\n- 指针变量的定义\n  - 数据类型 *指针变量名;\n  - int *p;\n- 指针变量的赋值\n  - p=&a;\n  - p=a;\n## 数据类型转换\n- 自动类型转换\n  - 当两个不同类型的数据进行运算时，系统会自动将其中一个数据类型转换为另一个数据类型\n  - 规则\n    - 如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型\n    - 如果两个操作数中有一个是float类型，另一个操作数就会转换为float类型\n    - 如果两个操作数中有一个是long类型，另一个操作数就会转换为long类型\n    - 如果两个操作数中有一个是unsigned int类型，另一个操作数就会转换为unsigned int类型\n    - 如果两个操作数中有一个是int类型，另一个操作数就会转换为int类型\n  - 优先级\n    - double > float > long > unsigned int > int\n- 赋值转换\n  - 当一个数据类型的值赋给另一个数据类型的变量时，系统会自动将一个数据类型转换为另一个数据类型\n  - 当实型赋值给整型时，小数部分会被截断，字符型赋值给整型时，会将字符的ASCII码赋给整型\n- 强制类型转换\n  - (数据类型)表达式\n  - 例如：(int)3.14\n  - 注意：强制类型转换会改变数据的存储方式，可能会改变数据的值\n\n## 输入输出\n- printf\n  - %[-][m.n] 格式控制符\n    - -表示左对齐\n    - m表示最小宽度\n    - n表示小数位数\n  - ++i 和 i++的区别\n    - ++i表示先加1再使用\n    - i++表示先使用再加1\n      - 如:printf(\"%d%d%d\",++i,++i,++i) i=1,输出4，3，2\n- scanf\n  - scanf(\"格式输入字符\",内存地址)\n\n## 运算符\n### 算术运算符\n- “+ - * / %”\n  - /表示整数除法，%表示取余\n  - 例如：5/2=2,5%2=1\n  - %的运算结果与被除数的符号相同\n  - 整型存在以下等式：a%b=a-(a/b)*b\n### 关系运算符\n- “> < >= <= == !=”\n  - 例如：a>b\n### 逻辑运算符\n- “&& || !”\n  - 例如：a>b&&a>c\n### 位运算符\n- “& | ^ ~ << >>”\n  - 例如：a&b\n### 赋值运算符\n- “= += -= *= /= %= &= |= ^= <<= >>=”\n  - 例如：a+=b\n### 条件运算符\n- 表达式1?表达式2:表达式3\n  - 例如：a>b?a:b\n### 逗号运算符\n- 表达式1,表达式2\n  - 例如：a,b\n### 优先级和结合性\n- 优先级\n  - 逗号运算符 > 赋值运算符 > 条件运算符 > 逻辑或运算符 > 逻辑与运算符 > 位或运算符 > 位异或运算符 > 位与运算符 > 关系运算符 > 移位运算符 > 加减运算符 > 乘除取余运算符\n  - 优先级相同的运算符，从左到右结合\n- 结合性\n  - 从左到右，例如：a+b+c 从左到右\n  - 从右到左，例如：a=b=c 从右到左\n## 编译预处理\n### 宏定义\n- #define PI 3.14159\n  - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n  - #define没有数据类型，只是简单的文本替换\n  - 宏定义的好处\n    - 提高程序的可读性\n    - 提高程序的可维护性\n    - 提高程序的可移植性\n    - 提高程序的执行效率\n  - 取消宏定义\n    - #undef\n  - 含参宏定义\n    - #define MAX(a,b) ((a)>(b)?(a):(b))\n    - 注意：含参宏定义不是函数，不会检查参数的类型，只是简单的文本替换，不分配内存空间\n  - 和const的区别\n    - const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值\n    - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n    - #define没有数据类型，只是简单的文本替换，而const有数据类型\n### 条件编译\n- #if #else #elif #endif\n  - #if 0\n    - 用于注释掉一段代码\n  - #ifdef\n    - 如果定义了宏，就编译\n  - #ifndef\n    - 如果没有定义宏，就编译\n  - #undef\n    - 取消宏定义\n### 文件包含\n- #include\n  - #include <stdio.h>\n    - 用于包含系统\n  - 写法：双引号和尖括号\n    - #include \"stdio.h\"\n    - #include <stdio.h>\n    - 区别：双引号表示在当前目录下查找，尖括号表示在系统目录下查找\n  - 说明：\n    - #include不是C语言的一部分，是预处理命令\n    - 在包含的文件中不能出现main函数\n    - 包含的文件可以是C语言源文件，也可以是头文件\n    - 文件允许嵌套包含\n\n## 附录\n### 常用函数及其用法总结\n#### rand() 与 srand()\n- rand()函数\n  - 用于生成一个随机数\n  - 用法：int a = rand();\n  - 生成范围：0~RAND_MAX\n  - 范围控制\n    - 生成(a,b)之间的随机数：a+rand()%(b-a)\n    - 生成[a,b]之间的随机数：a+rand()%(b-a+1)\n    - 生成[a,b)之间的随机数：a+rand()%(b-a)\n    - 生成(a,b]之间的随机数：a+rand()%(b-a+1)\n- srand()函数\n  - 用于生成一个随机数种子\n  - 用法：srand((unsigned)time(NULL));\n##### 例题\n\n以下代码用于生成三个16~64之间的随机数，并判断是否有两个数相等\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(0));  // 使用当前时间作为随机数种子\n\n    int min = 16, max = 64;\n    int num1 = min + rand() % (max + 1 - min);\n    int num2 = min + rand() % (max + 1 - min);\n    int num3 = min + rand() % (max + 1 - min);\n\n    printf(\"The three numbers are: %d, %d, %d\\n\", num1, num2, num3);\n\n    if (num1 == num2 || num1 == num3 || num2 == num3) {\n        printf(\"Yes\\n\");\n    } else {\n        printf(\"No\\n\");\n    }\n    system(\"pause\");\n    return 0;\n}\n```","source":"_posts/C.md","raw":"---\ntitle: C语言程序设计笔记\ndate: 2024-3-7 20:00:00\ntags: \n- 程序设计\n- C语言\ncover: https://img2.imgtp.com/2024/05/26/wXskEuzZ.jpg\ncategories: 程序设计\n---\n# C语言程序设计笔记\n---\n## 目录\n- [C语言程序设计笔记](#c语言程序设计笔记)\n  - [目录](#目录)\n  - [前言](#前言)\n  - [程序设计基础](#程序设计基础)\n      - [一个简单C程序](#一个简单c程序)\n  - [C语言的基础数据类型](#c语言的基础数据类型)\n      - [ASCII码](#ascii码)\n      - [完整ASCII码表](#完整ascii码表)\n      - [基本数据类型](#基本数据类型)\n        - [例子：体验实数的误差](#例子体验实数的误差)\n        - [例子：整型数据的溢出](#例子整型数据的溢出)\n        - [例子：无符号输出负数](#例子无符号输出负数)\n      - [常量](#常量)\n      - [变量](#变量)\n        - [例子：数据类型](#例子数据类型)\n  - [整形数据的输入输出](#整形数据的输入输出)\n  - [浮点型数据](#浮点型数据)\n      - [浮点数比大小](#浮点数比大小)\n      - [浮点数修饰](#浮点数修饰)\n      - [字符的输入输出](#字符的输入输出)\n  - [指针](#指针)\n  - [数据类型转换](#数据类型转换)\n  - [输入输出](#输入输出)\n  - [运算符](#运算符)\n    - [算术运算符](#算术运算符)\n    - [关系运算符](#关系运算符)\n    - [逻辑运算符](#逻辑运算符)\n    - [位运算符](#位运算符)\n    - [赋值运算符](#赋值运算符)\n    - [条件运算符](#条件运算符)\n    - [逗号运算符](#逗号运算符)\n    - [优先级和结合性](#优先级和结合性)\n  - [编译预处理](#编译预处理)\n    - [宏定义](#宏定义)\n    - [条件编译](#条件编译)\n    - [文件包含](#文件包含)\n  - [附录](#附录)\n    - [常用函数及其用法总结](#常用函数及其用法总结)\n      - [rand() 与 srand()](#rand-与-srand)\n        - [例题](#例题)\n---\n## 前言\n\n$$没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难$$\n\n---\n## 程序设计基础\n#### 一个简单C程序\n```c\n#include <stdio.h>\nint main(){\n  double r,area; //定义半径和面积\n  printf(\"请输入圆的半径：\");\n  scanf(\"%f\",&r); //&r是取地址符,表示将r的地址传递给scanf函数\n  area = 3.14159*r*r;\n  printf(\"圆的面积是：%.2lf\\n\",area);\n  return 0;\n}\n```\n## C语言的基础数据类型\n#### ASCII码\n- 空格 32\n- 0 48\n- A 65\n- a 97\n#### 完整ASCII码表\n| ASCII值 | 字符 | ASCII值 | 字符 | ASCII值 | 字符 | ASCII值 | 字符 |\n|---------|------|---------|------|---------|------|---------|------|\n| 0       | NUL  | 32      | SP   | 64      | @    | 96      | `    |\n| 1       | SOH  | 33      | !    | 65      | A    | 97      | a    |\n| 2       | STX  | 34      | \"    | 66      | B    | 98      | b    |\n| 3       | ETX  | 35      | #    | 67      | C    | 99      | c    |\n| 4       | EOT  | 36      | $    | 68      | D    | 100     | d    |\n| 5       | ENQ  | 37      | %    | 69      | E    | 101     | e    |\n| 6       | ACK  | 38      | &    | 70      | F    | 102     | f    |\n| 7       | BEL  | 39      | '    | 71      | G    | 103     | g    |\n| 8       | BS   | 40      | (    | 72      | H    | 104     | h    |\n| 9       | HT   | 41      | )    | 73      | I    | 105     | i    |\n| 10      | LF   | 42      | *    | 74      | J    | 106     | j    |\n| 11      | VT   | 43      | +    | 75      | K    | 107     | k    |\n| 12      | FF   | 44      | ,    | 76      | L    | 108     | l    |\n| 13      | CR   | 45      | -    | 77      | M    | 109     | m    |\n| 14      | SO   | 46      | .    | 78      | N    | 110     | n    |\n| 15      | SI   | 47      | /    | 79      | O    | 111     | o    |\n| 16      | DLE  | 48      | 0    | 80      | P    | 112     | p    |\n| 17      | DC1  | 49      | 1    | 81      | Q    | 113     | q    |\n| 18      | DC2  | 50      | 2    | 82      | R    | 114     | r    |\n| 19      | DC3  | 51      | 3    | 83      | S    | 115     | s    |\n| 20      | DC4  | 52      | 4    | 84      | T    | 116     | t    |\n| 21      | NAK  | 53      | 5    | 85      | U    | 117     | u    |\n| 22      | SYN  | 54      | 6    | 86      | V    | 118     | v    |\n| 23      | ETB  | 55      | 7    | 87      | W    | 119     | w    |\n| 24      | CAN  | 56      | 8    | 88      | X    | 120     | x    |\n| 25      | EM   | 57      | 9    | 89      | Y    | 121     | y    |\n| 26      | SUB  | 58      | :    | 90      | Z    | 122     | z    |\n| 27      | ESC  | 59      | ;    | 91      | [    | 123     | {    |\n| 28      | FS   | 60      | <    | 92      | \\    | 124     | \\|   |\n| 29      | GS   | 61      | =    | 93      | ]    | 125     | }    |\n| 30      | RS   | 62      | >    | 94      | ^    | 126     | ~    |\n| 31      | US   | 63      | ?    | 95      | _    | 127     | DEL  |\n\n#### 基本数据类型\n- 基本类型\n  - 整型\n    - 有符号整型\n      - char\n        - 范围：-128~127，对应的格式控制符为%c\n      - short\n      - int\n        - 占用 $2^{32}-1$ 位,从$-2^{31}$到$2^{31}-1$，负数比正数多一个，对应的格式控制符为%d\n      - long\n      - long long\n    - 无符号整型\n      - unsigned char\n      - unsigned short\n      - unsigned int\n        - 取值范围为0~$2^{32}-1$，对应的格式控制符为%u\n      - unsigned long\n      - unsigned long long\n    - **注意：整型和字符型的存储空间大小是平台相关的，可以互相兼容**\n  - 浮点型\n    - 单精度\n      - float\n        - 数的浮点表示形式：阶码和尾数\n          - 阶码：用来表示数的次方，采用补码表示，占用一个字节，阶符位为0表示正数，为1表示负数\n          - 尾数：用来表示数的有效数字，采用补码表示，占用三个字节\n          - 范围$\\pm 3.4*10^{38}$，对应的格式控制符为%f\n    - 双精度\n      - double\n        - 范围$\\pm 1.7*10^{308}$，对应的格式控制符为%lf\n  - 字符型\n  - 枚举型\n- 构造类型\n- 指针类型\n- 空类型\n##### 例子：体验实数的误差\n```c\n#include <stdio.h>\nint main(){\n  float d=3.500001,s;\n  int i=0;\n  int s=0;\n  for (i=0;i<1000000;i++){\n    s+=d;\n  }\n  printf(\"%f\\n\",s); \n  // 如果换成double类型，结果是3500001.000000\n}\n```\n##### 例子：整型数据的溢出\n```c\n#include <stdio.h>\nint main(){\n  int a=2147483647;\n  printf(\"%d\\n\",a+1); //输出结果为-2147483648\n  // 原因：int类型的取值范围为-2147483648~2147483647，加上1之后就会溢出\n  int b=-2147483648;\n  printf(\"%d\\n\",b-1); //输出结果为2147483647\n}\n```\n\n##### 例子：无符号输出负数\n\n```c\n#include <stdio.h>\nint main(){\n  int a=-1;\n  printf(\"%u\\n\",a); //输出结果为4294967295\n  // 原因：-1的补码为11111111 11111111 11111111 11111111，转换为无符号数就是4294967295\n}\n\n```\n#### 常量\n- 常量\n  - 整型常量\n    - 十进制\n    - 八进制\n    - 十六进制\n      - 0x00001\n  - 实型常量\n    - 小数表示\n    - 科学计数法\n      - 2.5e-3，3.2e2\n  - 字符常量\n    - 一般字符常量\n      - 'A'，'a'\n      - 'a'-32='A'，在内存中存储的是ASCII码\n    - 转义常量\n      - \\n 换行\n      - \\t 制表\n        - 8个字符为一个输出区，\\t表示跳到下一个输出区\n      - \\r 回车\n      - \\b 退格\n      - \\f 换页\n      - \\0 空字符\n      - \\ooo 三位八进制\n        - 表示1~377的字符,可以不用前缀0\n      - \\ddd 八进制\n      - \\xhh 十六进制\n      - \\\\\\ 反斜杠\n      - \\0 空字符\n        - 表示0的字符，用\\0比0更直观\n  - 字符串常量\n    - 字符串的存储占用多个字符的存储空间，结尾有一个\\0\n    - 字符串和字符数组的区别\n      - 字符串是字符数组的一种特殊形式，一个字符占用一个字节\n      - 字符串以\\0结尾\n  - 符号常量\n    - #define PI 3.14159\n      - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n      - #define没有数据类型，只是简单的文本替换\n    - const double PI = 3.14159\n      -const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值\n#### 变量\n变量必须先定义后使用，定义变量的格式为：数据类型 变量名;\n符号名空间到逻辑地址，逻辑地址到物理地址\n变量定义的规则：\n- 变量名由字母、数字、下划线组成，不能以数字开头\n  - 如：a1，_a，a_，_1，但是不能是1a\n- 变量名区分大小写\n  - 如：a和A是两个不同的变量\n- 不能使用C语言的关键字作为变量名\n- sizeof()是唯一一个不是函数的运算符，它返回一个变量或者数据类型的字节数\n##### 例子：数据类型\n```c\n#include <stdio.h>\nint main(){\n  printf(\"转义字符：a\\nabc\\bfff\\a\") //输出结果为：a bcfff 一声响铃\n  printf(\"整型常量：%d,%d,%d\\n\",12,012,0x12);\n  printf(\"实型常量：%f,%f\\n\",3.14,3.14e-2);\n  printf(\"字符常量：%c,%c\\n\",'A','\\n');\n  printf(\"字符串常量：%s\\n\",\"Hello,world!\");\n}\n```\n\n## 整形数据的输入输出\n\n输入输出\n- 输入\n  - scanf()\n    - 如果两个数字连续输入，可以使用空格、回车、制表符分隔\n    - 如果两个数字连续输入，可以使用逗号分隔，但是两个数字之间必须加上逗号\n    - 例如：scanf(\"%d,%d\",&a,&b);必须输入1,2，不能输入1 2\n    - **scanf()中有\\n时必须回车**\n- 输出\n  - printf()\n\n## 浮点型数据\n#### 浮点数比大小\n注意：两个浮点数比大小时，**不能直接用==**，因为浮点数在计算机中是以二进制形式存储的，有时候会有误差，使用 $$|a-b|<10^{-6}$$ 来判断两个浮点数是否相等,其中 $10^{-6}$ 是一个机器精度\n#### 浮点数修饰\n- %f\n  - 默认保留6位小数\n  - %.2f保留两位小数\n- %-10.2f\n  - 左对齐，保留两位小数\n- %10.2f\n  - 右对齐，保留两位小数\n\n#### 字符的输入输出\n- 输入\n  - scanf(\"%c%c\",&a,&b);\n    - 如果输入ab，那么a='a',b='b'\n    - 如果输入a b，那么a='a',b=' '\n  - scanf(\"%c %c\",&a,&b);\n    - 如果输入ab，那么a='a',b='b'\n    - 如果输入a b，那么a='a',b='b'\n  - scanf(\"%c,%c\",&a,&b);\n    - 如果输入a,b，那么a='a',b='b'\n  - getchar()\n    - 从键盘输入一个字符，不需要回车\n- 输出\n  - printf(\"%c%c\",a,b);\n    - 输出ab\n  - putchar(a);\n    - 输出a\n## 指针\n- 指针是一个变量，它的值是一个地址\n- 指针变量的定义\n  - 数据类型 *指针变量名;\n  - int *p;\n- 指针变量的赋值\n  - p=&a;\n  - p=a;\n## 数据类型转换\n- 自动类型转换\n  - 当两个不同类型的数据进行运算时，系统会自动将其中一个数据类型转换为另一个数据类型\n  - 规则\n    - 如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型\n    - 如果两个操作数中有一个是float类型，另一个操作数就会转换为float类型\n    - 如果两个操作数中有一个是long类型，另一个操作数就会转换为long类型\n    - 如果两个操作数中有一个是unsigned int类型，另一个操作数就会转换为unsigned int类型\n    - 如果两个操作数中有一个是int类型，另一个操作数就会转换为int类型\n  - 优先级\n    - double > float > long > unsigned int > int\n- 赋值转换\n  - 当一个数据类型的值赋给另一个数据类型的变量时，系统会自动将一个数据类型转换为另一个数据类型\n  - 当实型赋值给整型时，小数部分会被截断，字符型赋值给整型时，会将字符的ASCII码赋给整型\n- 强制类型转换\n  - (数据类型)表达式\n  - 例如：(int)3.14\n  - 注意：强制类型转换会改变数据的存储方式，可能会改变数据的值\n\n## 输入输出\n- printf\n  - %[-][m.n] 格式控制符\n    - -表示左对齐\n    - m表示最小宽度\n    - n表示小数位数\n  - ++i 和 i++的区别\n    - ++i表示先加1再使用\n    - i++表示先使用再加1\n      - 如:printf(\"%d%d%d\",++i,++i,++i) i=1,输出4，3，2\n- scanf\n  - scanf(\"格式输入字符\",内存地址)\n\n## 运算符\n### 算术运算符\n- “+ - * / %”\n  - /表示整数除法，%表示取余\n  - 例如：5/2=2,5%2=1\n  - %的运算结果与被除数的符号相同\n  - 整型存在以下等式：a%b=a-(a/b)*b\n### 关系运算符\n- “> < >= <= == !=”\n  - 例如：a>b\n### 逻辑运算符\n- “&& || !”\n  - 例如：a>b&&a>c\n### 位运算符\n- “& | ^ ~ << >>”\n  - 例如：a&b\n### 赋值运算符\n- “= += -= *= /= %= &= |= ^= <<= >>=”\n  - 例如：a+=b\n### 条件运算符\n- 表达式1?表达式2:表达式3\n  - 例如：a>b?a:b\n### 逗号运算符\n- 表达式1,表达式2\n  - 例如：a,b\n### 优先级和结合性\n- 优先级\n  - 逗号运算符 > 赋值运算符 > 条件运算符 > 逻辑或运算符 > 逻辑与运算符 > 位或运算符 > 位异或运算符 > 位与运算符 > 关系运算符 > 移位运算符 > 加减运算符 > 乘除取余运算符\n  - 优先级相同的运算符，从左到右结合\n- 结合性\n  - 从左到右，例如：a+b+c 从左到右\n  - 从右到左，例如：a=b=c 从右到左\n## 编译预处理\n### 宏定义\n- #define PI 3.14159\n  - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n  - #define没有数据类型，只是简单的文本替换\n  - 宏定义的好处\n    - 提高程序的可读性\n    - 提高程序的可维护性\n    - 提高程序的可移植性\n    - 提高程序的执行效率\n  - 取消宏定义\n    - #undef\n  - 含参宏定义\n    - #define MAX(a,b) ((a)>(b)?(a):(b))\n    - 注意：含参宏定义不是函数，不会检查参数的类型，只是简单的文本替换，不分配内存空间\n  - 和const的区别\n    - const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值\n    - #define不是C语言的一部分，是预处理命令，不能以分号结尾\n    - #define没有数据类型，只是简单的文本替换，而const有数据类型\n### 条件编译\n- #if #else #elif #endif\n  - #if 0\n    - 用于注释掉一段代码\n  - #ifdef\n    - 如果定义了宏，就编译\n  - #ifndef\n    - 如果没有定义宏，就编译\n  - #undef\n    - 取消宏定义\n### 文件包含\n- #include\n  - #include <stdio.h>\n    - 用于包含系统\n  - 写法：双引号和尖括号\n    - #include \"stdio.h\"\n    - #include <stdio.h>\n    - 区别：双引号表示在当前目录下查找，尖括号表示在系统目录下查找\n  - 说明：\n    - #include不是C语言的一部分，是预处理命令\n    - 在包含的文件中不能出现main函数\n    - 包含的文件可以是C语言源文件，也可以是头文件\n    - 文件允许嵌套包含\n\n## 附录\n### 常用函数及其用法总结\n#### rand() 与 srand()\n- rand()函数\n  - 用于生成一个随机数\n  - 用法：int a = rand();\n  - 生成范围：0~RAND_MAX\n  - 范围控制\n    - 生成(a,b)之间的随机数：a+rand()%(b-a)\n    - 生成[a,b]之间的随机数：a+rand()%(b-a+1)\n    - 生成[a,b)之间的随机数：a+rand()%(b-a)\n    - 生成(a,b]之间的随机数：a+rand()%(b-a+1)\n- srand()函数\n  - 用于生成一个随机数种子\n  - 用法：srand((unsigned)time(NULL));\n##### 例题\n\n以下代码用于生成三个16~64之间的随机数，并判断是否有两个数相等\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n\nint main() {\n    srand(time(0));  // 使用当前时间作为随机数种子\n\n    int min = 16, max = 64;\n    int num1 = min + rand() % (max + 1 - min);\n    int num2 = min + rand() % (max + 1 - min);\n    int num3 = min + rand() % (max + 1 - min);\n\n    printf(\"The three numbers are: %d, %d, %d\\n\", num1, num2, num3);\n\n    if (num1 == num2 || num1 == num3 || num2 == num3) {\n        printf(\"Yes\\n\");\n    } else {\n        printf(\"No\\n\");\n    }\n    system(\"pause\");\n    return 0;\n}\n```","slug":"C","published":1,"updated":"2024-05-26T14:23:21.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwnoxp0i0001zsuh7crtah3w","content":"<h1>C语言程序设计笔记</h1>\n<hr>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0\">C语言程序设计笔记</a>\n<ul>\n<li><a href=\"#%E7%9B%AE%E5%BD%95\">目录</a></li>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80\">程序设计基础</a>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95c%E7%A8%8B%E5%BA%8F\">一个简单C程序</a></li>\n</ul>\n</li>\n<li><a href=\"#c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">C语言的基础数据类型</a>\n<ul>\n<li><a href=\"#ascii%E7%A0%81\">ASCII码</a></li>\n<li><a href=\"#%E5%AE%8C%E6%95%B4ascii%E7%A0%81%E8%A1%A8\">完整ASCII码表</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基本数据类型</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E4%BD%93%E9%AA%8C%E5%AE%9E%E6%95%B0%E7%9A%84%E8%AF%AF%E5%B7%AE\">例子：体验实数的误差</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%95%B4%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E6%BA%A2%E5%87%BA\">例子：整型数据的溢出</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%97%A0%E7%AC%A6%E5%8F%B7%E8%BE%93%E5%87%BA%E8%B4%9F%E6%95%B0\">例子：无符号输出负数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E9%87%8F\">常量</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">例子：数据类型</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%95%B4%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">整形数据的输入输出</a></li>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE\">浮点型数据</a>\n<ul>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%AF%94%E5%A4%A7%E5%B0%8F\">浮点数比大小</a></li>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BF%AE%E9%A5%B0\">浮点数修饰</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">字符的输入输出</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8C%87%E9%92%88\">指针</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">数据类型转换</a></li>\n<li><a href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">输入输出</a></li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a>\n<ul>\n<li><a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算术运算符</a></li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a></li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a></li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\">条件运算符</a></li>\n<li><a href=\"#%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6\">逗号运算符</a></li>\n<li><a href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E7%BB%93%E5%90%88%E6%80%A7\">优先级和结合性</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86\">编译预处理</a>\n<ul>\n<li><a href=\"#%E5%AE%8F%E5%AE%9A%E4%B9%89\">宏定义</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91\">条件编译</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\">文件包含</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%99%84%E5%BD%95\">附录</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93\">常用函数及其用法总结</a>\n<ul>\n<li><a href=\"#rand-%E4%B8%8E-srand\">rand() 与 srand()</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E9%A2%98\">例题</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"前言\">前言</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难</mtext></mrow><annotation encoding=\"application/x-tex\">没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难</span></span></span></span></span></p>\n<hr>\n<h2 id=\"程序设计基础\">程序设计基础</h2>\n<h4 id=\"一个简单C程序\">一个简单C程序</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> r,area; <span class=\"comment\">//定义半径和面积</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入圆的半径：&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;r); <span class=\"comment\">//&amp;r是取地址符,表示将r的地址传递给scanf函数</span></span><br><span class=\"line\">  area = <span class=\"number\">3.14159</span>*r*r;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;圆的面积是：%.2lf\\n&quot;</span>,area);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C语言的基础数据类型\">C语言的基础数据类型</h2>\n<h4 id=\"ASCII码\">ASCII码</h4>\n<ul>\n<li>空格 32</li>\n<li>0 48</li>\n<li>A 65</li>\n<li>a 97</li>\n</ul>\n<h4 id=\"完整ASCII码表\">完整ASCII码表</h4>\n<table>\n<thead>\n<tr>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUL</td>\n<td>32</td>\n<td>SP</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>`</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>’</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DC1</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>ETB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>\\</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>~</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"基本数据类型\">基本数据类型</h4>\n<ul>\n<li>基本类型\n<ul>\n<li>整型\n<ul>\n<li>有符号整型\n<ul>\n<li>char\n<ul>\n<li>范围：-128~127，对应的格式控制符为%c</li>\n</ul>\n</li>\n<li>short</li>\n<li>int\n<ul>\n<li>占用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 位,从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，负数比正数多一个，对应的格式控制符为%d</li>\n</ul>\n</li>\n<li>long</li>\n<li>long long</li>\n</ul>\n</li>\n<li>无符号整型\n<ul>\n<li>unsigned char</li>\n<li>unsigned short</li>\n<li>unsigned int\n<ul>\n<li>取值范围为0~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，对应的格式控制符为%u</li>\n</ul>\n</li>\n<li>unsigned long</li>\n<li>unsigned long long</li>\n</ul>\n</li>\n<li><strong>注意：整型和字符型的存储空间大小是平台相关的，可以互相兼容</strong></li>\n</ul>\n</li>\n<li>浮点型\n<ul>\n<li>单精度\n<ul>\n<li>float\n<ul>\n<li>数的浮点表示形式：阶码和尾数\n<ul>\n<li>阶码：用来表示数的次方，采用补码表示，占用一个字节，阶符位为0表示正数，为1表示负数</li>\n<li>尾数：用来表示数的有效数字，采用补码表示，占用三个字节</li>\n<li>范围<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>3.4</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pm 3.4*10^{38}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord\">3.4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">38</span></span></span></span></span></span></span></span></span></span></span></span>，对应的格式控制符为%f</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>双精度\n<ul>\n<li>double\n<ul>\n<li>范围<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>1.7</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pm 1.7*10^{308}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord\">1.7</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">308</span></span></span></span></span></span></span></span></span></span></span></span>，对应的格式控制符为%lf</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符型</li>\n<li>枚举型</li>\n</ul>\n</li>\n<li>构造类型</li>\n<li>指针类型</li>\n<li>空类型</li>\n</ul>\n<h5 id=\"例子：体验实数的误差\">例子：体验实数的误差</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">float</span> d=<span class=\"number\">3.500001</span>,s;</span><br><span class=\"line\">  <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000</span>;i++)&#123;</span><br><span class=\"line\">    s+=d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f\\n&quot;</span>,s); </span><br><span class=\"line\">  <span class=\"comment\">// 如果换成double类型，结果是3500001.000000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子：整型数据的溢出\">例子：整型数据的溢出</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a=<span class=\"number\">2147483647</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a+<span class=\"number\">1</span>); <span class=\"comment\">//输出结果为-2147483648</span></span><br><span class=\"line\">  <span class=\"comment\">// 原因：int类型的取值范围为-2147483648~2147483647，加上1之后就会溢出</span></span><br><span class=\"line\">  <span class=\"type\">int</span> b=<span class=\"number\">-2147483648</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,b<span class=\"number\">-1</span>); <span class=\"comment\">//输出结果为2147483647</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子：无符号输出负数\">例子：无符号输出负数</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%u\\n&quot;</span>,a); <span class=\"comment\">//输出结果为4294967295</span></span><br><span class=\"line\">  <span class=\"comment\">// 原因：-1的补码为11111111 11111111 11111111 11111111，转换为无符号数就是4294967295</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"常量\">常量</h4>\n<ul>\n<li>常量\n<ul>\n<li>整型常量\n<ul>\n<li>十进制</li>\n<li>八进制</li>\n<li>十六进制\n<ul>\n<li>0x00001</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实型常量\n<ul>\n<li>小数表示</li>\n<li>科学计数法\n<ul>\n<li>2.5e-3，3.2e2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符常量\n<ul>\n<li>一般字符常量\n<ul>\n<li>‘A’，‘a’</li>\n<li>‘a’-32=‘A’，在内存中存储的是ASCII码</li>\n</ul>\n</li>\n<li>转义常量\n<ul>\n<li>\\n 换行</li>\n<li>\\t 制表\n<ul>\n<li>8个字符为一个输出区，\\t表示跳到下一个输出区</li>\n</ul>\n</li>\n<li>\\r 回车</li>\n<li>\\b 退格</li>\n<li>\\f 换页</li>\n<li>\\0 空字符</li>\n<li>\\ooo 三位八进制\n<ul>\n<li>表示1~377的字符,可以不用前缀0</li>\n</ul>\n</li>\n<li>\\ddd 八进制</li>\n<li>\\xhh 十六进制</li>\n<li>\\\\ 反斜杠</li>\n<li>\\0 空字符\n<ul>\n<li>表示0的字符，用\\0比0更直观</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符串常量\n<ul>\n<li>字符串的存储占用多个字符的存储空间，结尾有一个\\0</li>\n<li>字符串和字符数组的区别\n<ul>\n<li>字符串是字符数组的一种特殊形式，一个字符占用一个字节</li>\n<li>字符串以\\0结尾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>符号常量\n<ul>\n<li>#define PI 3.14159\n<ul>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换</li>\n</ul>\n</li>\n<li>const double PI = 3.14159<br>\n-const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"变量\">变量</h4>\n<p>变量必须先定义后使用，定义变量的格式为：数据类型 变量名;<br>\n符号名空间到逻辑地址，逻辑地址到物理地址<br>\n变量定义的规则：</p>\n<ul>\n<li>变量名由字母、数字、下划线组成，不能以数字开头\n<ul>\n<li>如：a1，<em>a，a</em>，_1，但是不能是1a</li>\n</ul>\n</li>\n<li>变量名区分大小写\n<ul>\n<li>如：a和A是两个不同的变量</li>\n</ul>\n</li>\n<li>不能使用C语言的关键字作为变量名</li>\n<li>sizeof()是唯一一个不是函数的运算符，它返回一个变量或者数据类型的字节数</li>\n</ul>\n<h5 id=\"例子：数据类型\">例子：数据类型</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;转义字符：a\\nabc\\bfff\\a&quot;</span>) <span class=\"comment\">//输出结果为：a bcfff 一声响铃</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;整型常量：%d,%d,%d\\n&quot;</span>,<span class=\"number\">12</span>,<span class=\"number\">012</span>,<span class=\"number\">0x12</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;实型常量：%f,%f\\n&quot;</span>,<span class=\"number\">3.14</span>,<span class=\"number\">3.14e-2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;字符常量：%c,%c\\n&quot;</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;字符串常量：%s\\n&quot;</span>,<span class=\"string\">&quot;Hello,world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整形数据的输入输出\">整形数据的输入输出</h2>\n<p>输入输出</p>\n<ul>\n<li>输入\n<ul>\n<li>scanf()\n<ul>\n<li>如果两个数字连续输入，可以使用空格、回车、制表符分隔</li>\n<li>如果两个数字连续输入，可以使用逗号分隔，但是两个数字之间必须加上逗号</li>\n<li>例如：scanf(“%d,%d”,&amp;a,&amp;b);必须输入1,2，不能输入1 2</li>\n<li><strong>scanf()中有\\n时必须回车</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输出\n<ul>\n<li>printf()</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"浮点型数据\">浮点型数据</h2>\n<h4 id=\"浮点数比大小\">浮点数比大小</h4>\n<p>注意：两个浮点数比大小时，<strong>不能直接用==</strong>，因为浮点数在计算机中是以二进制形式存储的，有时候会有误差，使用 $$|a-b|&lt;10^{-6}$$ 来判断两个浮点数是否相等,其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{-6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span> 是一个机器精度</p>\n<h4 id=\"浮点数修饰\">浮点数修饰</h4>\n<ul>\n<li>%f\n<ul>\n<li>默认保留6位小数</li>\n<li>%.2f保留两位小数</li>\n</ul>\n</li>\n<li>%-10.2f\n<ul>\n<li>左对齐，保留两位小数</li>\n</ul>\n</li>\n<li>%10.2f\n<ul>\n<li>右对齐，保留两位小数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符的输入输出\">字符的输入输出</h4>\n<ul>\n<li>输入\n<ul>\n<li>scanf(“%c%c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入ab，那么a=‘a’,b=‘b’</li>\n<li>如果输入a b，那么a=‘a’,b=’ ’</li>\n</ul>\n</li>\n<li>scanf(“%c %c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入ab，那么a=‘a’,b=‘b’</li>\n<li>如果输入a b，那么a=‘a’,b=‘b’</li>\n</ul>\n</li>\n<li>scanf(“%c,%c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入a,b，那么a=‘a’,b=‘b’</li>\n</ul>\n</li>\n<li>getchar()\n<ul>\n<li>从键盘输入一个字符，不需要回车</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输出\n<ul>\n<li>printf(“%c%c”,a,b);\n<ul>\n<li>输出ab</li>\n</ul>\n</li>\n<li>putchar(a);\n<ul>\n<li>输出a</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指针\">指针</h2>\n<ul>\n<li>指针是一个变量，它的值是一个地址</li>\n<li>指针变量的定义\n<ul>\n<li>数据类型 *指针变量名;</li>\n<li>int *p;</li>\n</ul>\n</li>\n<li>指针变量的赋值\n<ul>\n<li>p=&amp;a;</li>\n<li>p=a;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型转换\">数据类型转换</h2>\n<ul>\n<li>自动类型转换\n<ul>\n<li>当两个不同类型的数据进行运算时，系统会自动将其中一个数据类型转换为另一个数据类型</li>\n<li>规则\n<ul>\n<li>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型</li>\n<li>如果两个操作数中有一个是float类型，另一个操作数就会转换为float类型</li>\n<li>如果两个操作数中有一个是long类型，另一个操作数就会转换为long类型</li>\n<li>如果两个操作数中有一个是unsigned int类型，另一个操作数就会转换为unsigned int类型</li>\n<li>如果两个操作数中有一个是int类型，另一个操作数就会转换为int类型</li>\n</ul>\n</li>\n<li>优先级\n<ul>\n<li>double &gt; float &gt; long &gt; unsigned int &gt; int</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>赋值转换\n<ul>\n<li>当一个数据类型的值赋给另一个数据类型的变量时，系统会自动将一个数据类型转换为另一个数据类型</li>\n<li>当实型赋值给整型时，小数部分会被截断，字符型赋值给整型时，会将字符的ASCII码赋给整型</li>\n</ul>\n</li>\n<li>强制类型转换\n<ul>\n<li>(数据类型)表达式</li>\n<li>例如：(int)3.14</li>\n<li>注意：强制类型转换会改变数据的存储方式，可能会改变数据的值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"输入输出\">输入输出</h2>\n<ul>\n<li>printf\n<ul>\n<li>%[-][m.n] 格式控制符\n<ul>\n<li>-表示左对齐</li>\n<li>m表示最小宽度</li>\n<li>n表示小数位数</li>\n</ul>\n</li>\n<li>++i 和 i++的区别\n<ul>\n<li>++i表示先加1再使用</li>\n<li>i++表示先使用再加1\n<ul>\n<li>如:printf(“%d%d%d”,++i,++i,++i) i=1,输出4，3，2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>scanf\n<ul>\n<li>scanf(“格式输入字符”,内存地址)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运算符\">运算符</h2>\n<h3 id=\"算术运算符\">算术运算符</h3>\n<ul>\n<li>“+ - * / %”\n<ul>\n<li>/表示整数除法，%表示取余</li>\n<li>例如：5/2=2,5%2=1</li>\n<li>%的运算结果与被除数的符号相同</li>\n<li>整型存在以下等式：a%b=a-(a/b)*b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系运算符\">关系运算符</h3>\n<ul>\n<li>“&gt; &lt; &gt;= &lt;= == !=”\n<ul>\n<li>例如：a&gt;b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\n<ul>\n<li>“&amp;&amp; || !”\n<ul>\n<li>例如：a&gt;b&amp;&amp;a&gt;c</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"位运算符\">位运算符</h3>\n<ul>\n<li>“&amp; | ^ ~ &lt;&lt; &gt;&gt;”\n<ul>\n<li>例如：a&amp;b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"赋值运算符\">赋值运算符</h3>\n<ul>\n<li>“= += -= *= /= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=”\n<ul>\n<li>例如：a+=b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"条件运算符\">条件运算符</h3>\n<ul>\n<li>表达式1?表达式2:表达式3\n<ul>\n<li>例如：a&gt;b?a:b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逗号运算符\">逗号运算符</h3>\n<ul>\n<li>表达式1,表达式2\n<ul>\n<li>例如：a,b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级和结合性\">优先级和结合性</h3>\n<ul>\n<li>优先级\n<ul>\n<li>逗号运算符 &gt; 赋值运算符 &gt; 条件运算符 &gt; 逻辑或运算符 &gt; 逻辑与运算符 &gt; 位或运算符 &gt; 位异或运算符 &gt; 位与运算符 &gt; 关系运算符 &gt; 移位运算符 &gt; 加减运算符 &gt; 乘除取余运算符</li>\n<li>优先级相同的运算符，从左到右结合</li>\n</ul>\n</li>\n<li>结合性\n<ul>\n<li>从左到右，例如：a+b+c 从左到右</li>\n<li>从右到左，例如：a=b=c 从右到左</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译预处理\">编译预处理</h2>\n<h3 id=\"宏定义\">宏定义</h3>\n<ul>\n<li>#define PI 3.14159\n<ul>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换</li>\n<li>宏定义的好处\n<ul>\n<li>提高程序的可读性</li>\n<li>提高程序的可维护性</li>\n<li>提高程序的可移植性</li>\n<li>提高程序的执行效率</li>\n</ul>\n</li>\n<li>取消宏定义\n<ul>\n<li>#undef</li>\n</ul>\n</li>\n<li>含参宏定义\n<ul>\n<li>#define MAX(a,b) ((a)&gt;(b)?(a):(b))</li>\n<li>注意：含参宏定义不是函数，不会检查参数的类型，只是简单的文本替换，不分配内存空间</li>\n</ul>\n</li>\n<li>和const的区别\n<ul>\n<li>const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值</li>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换，而const有数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"条件编译\">条件编译</h3>\n<ul>\n<li>#if #else #elif #endif\n<ul>\n<li>#if 0\n<ul>\n<li>用于注释掉一段代码</li>\n</ul>\n</li>\n<li>#ifdef\n<ul>\n<li>如果定义了宏，就编译</li>\n</ul>\n</li>\n<li>#ifndef\n<ul>\n<li>如果没有定义宏，就编译</li>\n</ul>\n</li>\n<li>#undef\n<ul>\n<li>取消宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件包含\">文件包含</h3>\n<ul>\n<li>#include\n<ul>\n<li>#include &lt;stdio.h&gt;\n<ul>\n<li>用于包含系统</li>\n</ul>\n</li>\n<li>写法：双引号和尖括号\n<ul>\n<li>#include “stdio.h”</li>\n<li>#include &lt;stdio.h&gt;</li>\n<li>区别：双引号表示在当前目录下查找，尖括号表示在系统目录下查找</li>\n</ul>\n</li>\n<li>说明：\n<ul>\n<li>#include不是C语言的一部分，是预处理命令</li>\n<li>在包含的文件中不能出现main函数</li>\n<li>包含的文件可以是C语言源文件，也可以是头文件</li>\n<li>文件允许嵌套包含</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录\">附录</h2>\n<h3 id=\"常用函数及其用法总结\">常用函数及其用法总结</h3>\n<h4 id=\"rand-与-srand\">rand() 与 srand()</h4>\n<ul>\n<li>rand()函数\n<ul>\n<li>用于生成一个随机数</li>\n<li>用法：int a = rand();</li>\n<li>生成范围：0~RAND_MAX</li>\n<li>范围控制\n<ul>\n<li>生成(a,b)之间的随机数：a+rand()%(b-a)</li>\n<li>生成[a,b]之间的随机数：a+rand()%(b-a+1)</li>\n<li>生成[a,b)之间的随机数：a+rand()%(b-a)</li>\n<li>生成(a,b]之间的随机数：a+rand()%(b-a+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>srand()函数\n<ul>\n<li>用于生成一个随机数种子</li>\n<li>用法：srand((unsigned)time(NULL));</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题\">例题</h5>\n<p>以下代码用于生成三个16~64之间的随机数，并判断是否有两个数相等</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));  <span class=\"comment\">// 使用当前时间作为随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> min = <span class=\"number\">16</span>, max = <span class=\"number\">64</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num1 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\">    <span class=\"type\">int</span> num2 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\">    <span class=\"type\">int</span> num3 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The three numbers are: %d, %d, %d\\n&quot;</span>, num1, num2, num3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num1 == num2 || num1 == num3 || num2 == num3) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1>C语言程序设计笔记</h1>\n<hr>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#c%E8%AF%AD%E8%A8%80%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0\">C语言程序设计笔记</a>\n<ul>\n<li><a href=\"#%E7%9B%AE%E5%BD%95\">目录</a></li>\n<li><a href=\"#%E5%89%8D%E8%A8%80\">前言</a></li>\n<li><a href=\"#%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%9F%BA%E7%A1%80\">程序设计基础</a>\n<ul>\n<li><a href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95c%E7%A8%8B%E5%BA%8F\">一个简单C程序</a></li>\n</ul>\n</li>\n<li><a href=\"#c%E8%AF%AD%E8%A8%80%E7%9A%84%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">C语言的基础数据类型</a>\n<ul>\n<li><a href=\"#ascii%E7%A0%81\">ASCII码</a></li>\n<li><a href=\"#%E5%AE%8C%E6%95%B4ascii%E7%A0%81%E8%A1%A8\">完整ASCII码表</a></li>\n<li><a href=\"#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">基本数据类型</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E4%BD%93%E9%AA%8C%E5%AE%9E%E6%95%B0%E7%9A%84%E8%AF%AF%E5%B7%AE\">例子：体验实数的误差</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%95%B4%E5%9E%8B%E6%95%B0%E6%8D%AE%E7%9A%84%E6%BA%A2%E5%87%BA\">例子：整型数据的溢出</a></li>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%97%A0%E7%AC%A6%E5%8F%B7%E8%BE%93%E5%87%BA%E8%B4%9F%E6%95%B0\">例子：无符号输出负数</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%B8%B8%E9%87%8F\">常量</a></li>\n<li><a href=\"#%E5%8F%98%E9%87%8F\">变量</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E5%AD%90%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\">例子：数据类型</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#%E6%95%B4%E5%BD%A2%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">整形数据的输入输出</a></li>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E5%9E%8B%E6%95%B0%E6%8D%AE\">浮点型数据</a>\n<ul>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E6%AF%94%E5%A4%A7%E5%B0%8F\">浮点数比大小</a></li>\n<li><a href=\"#%E6%B5%AE%E7%82%B9%E6%95%B0%E4%BF%AE%E9%A5%B0\">浮点数修饰</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">字符的输入输出</a></li>\n</ul>\n</li>\n<li><a href=\"#%E6%8C%87%E9%92%88\">指针</a></li>\n<li><a href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2\">数据类型转换</a></li>\n<li><a href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\">输入输出</a></li>\n<li><a href=\"#%E8%BF%90%E7%AE%97%E7%AC%A6\">运算符</a>\n<ul>\n<li><a href=\"#%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6\">算术运算符</a></li>\n<li><a href=\"#%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6\">关系运算符</a></li>\n<li><a href=\"#%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6\">逻辑运算符</a></li>\n<li><a href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\">位运算符</a></li>\n<li><a href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\">赋值运算符</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E8%BF%90%E7%AE%97%E7%AC%A6\">条件运算符</a></li>\n<li><a href=\"#%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6\">逗号运算符</a></li>\n<li><a href=\"#%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E7%BB%93%E5%90%88%E6%80%A7\">优先级和结合性</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86\">编译预处理</a>\n<ul>\n<li><a href=\"#%E5%AE%8F%E5%AE%9A%E4%B9%89\">宏定义</a></li>\n<li><a href=\"#%E6%9D%A1%E4%BB%B6%E7%BC%96%E8%AF%91\">条件编译</a></li>\n<li><a href=\"#%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB\">文件包含</a></li>\n</ul>\n</li>\n<li><a href=\"#%E9%99%84%E5%BD%95\">附录</a>\n<ul>\n<li><a href=\"#%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93\">常用函数及其用法总结</a>\n<ul>\n<li><a href=\"#rand-%E4%B8%8E-srand\">rand() 与 srand()</a>\n<ul>\n<li><a href=\"#%E4%BE%8B%E9%A2%98\">例题</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"前言\">前言</h2>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难</mtext></mrow><annotation encoding=\"application/x-tex\">没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord cjk_fallback\">没有伤痕累累，哪来皮糙肉厚，英雄自古多磨难</span></span></span></span></span></p>\n<hr>\n<h2 id=\"程序设计基础\">程序设计基础</h2>\n<h4 id=\"一个简单C程序\">一个简单C程序</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">double</span> r,area; <span class=\"comment\">//定义半径和面积</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;请输入圆的半径：&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;r); <span class=\"comment\">//&amp;r是取地址符,表示将r的地址传递给scanf函数</span></span><br><span class=\"line\">  area = <span class=\"number\">3.14159</span>*r*r;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;圆的面积是：%.2lf\\n&quot;</span>,area);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"C语言的基础数据类型\">C语言的基础数据类型</h2>\n<h4 id=\"ASCII码\">ASCII码</h4>\n<ul>\n<li>空格 32</li>\n<li>0 48</li>\n<li>A 65</li>\n<li>a 97</li>\n</ul>\n<h4 id=\"完整ASCII码表\">完整ASCII码表</h4>\n<table>\n<thead>\n<tr>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n<th>ASCII值</th>\n<th>字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>NUL</td>\n<td>32</td>\n<td>SP</td>\n<td>64</td>\n<td>@</td>\n<td>96</td>\n<td>`</td>\n</tr>\n<tr>\n<td>1</td>\n<td>SOH</td>\n<td>33</td>\n<td>!</td>\n<td>65</td>\n<td>A</td>\n<td>97</td>\n<td>a</td>\n</tr>\n<tr>\n<td>2</td>\n<td>STX</td>\n<td>34</td>\n<td>&quot;</td>\n<td>66</td>\n<td>B</td>\n<td>98</td>\n<td>b</td>\n</tr>\n<tr>\n<td>3</td>\n<td>ETX</td>\n<td>35</td>\n<td>#</td>\n<td>67</td>\n<td>C</td>\n<td>99</td>\n<td>c</td>\n</tr>\n<tr>\n<td>4</td>\n<td>EOT</td>\n<td>36</td>\n<td>$</td>\n<td>68</td>\n<td>D</td>\n<td>100</td>\n<td>d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>ENQ</td>\n<td>37</td>\n<td>%</td>\n<td>69</td>\n<td>E</td>\n<td>101</td>\n<td>e</td>\n</tr>\n<tr>\n<td>6</td>\n<td>ACK</td>\n<td>38</td>\n<td>&amp;</td>\n<td>70</td>\n<td>F</td>\n<td>102</td>\n<td>f</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BEL</td>\n<td>39</td>\n<td>’</td>\n<td>71</td>\n<td>G</td>\n<td>103</td>\n<td>g</td>\n</tr>\n<tr>\n<td>8</td>\n<td>BS</td>\n<td>40</td>\n<td>(</td>\n<td>72</td>\n<td>H</td>\n<td>104</td>\n<td>h</td>\n</tr>\n<tr>\n<td>9</td>\n<td>HT</td>\n<td>41</td>\n<td>)</td>\n<td>73</td>\n<td>I</td>\n<td>105</td>\n<td>i</td>\n</tr>\n<tr>\n<td>10</td>\n<td>LF</td>\n<td>42</td>\n<td>*</td>\n<td>74</td>\n<td>J</td>\n<td>106</td>\n<td>j</td>\n</tr>\n<tr>\n<td>11</td>\n<td>VT</td>\n<td>43</td>\n<td>+</td>\n<td>75</td>\n<td>K</td>\n<td>107</td>\n<td>k</td>\n</tr>\n<tr>\n<td>12</td>\n<td>FF</td>\n<td>44</td>\n<td>,</td>\n<td>76</td>\n<td>L</td>\n<td>108</td>\n<td>l</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CR</td>\n<td>45</td>\n<td>-</td>\n<td>77</td>\n<td>M</td>\n<td>109</td>\n<td>m</td>\n</tr>\n<tr>\n<td>14</td>\n<td>SO</td>\n<td>46</td>\n<td>.</td>\n<td>78</td>\n<td>N</td>\n<td>110</td>\n<td>n</td>\n</tr>\n<tr>\n<td>15</td>\n<td>SI</td>\n<td>47</td>\n<td>/</td>\n<td>79</td>\n<td>O</td>\n<td>111</td>\n<td>o</td>\n</tr>\n<tr>\n<td>16</td>\n<td>DLE</td>\n<td>48</td>\n<td>0</td>\n<td>80</td>\n<td>P</td>\n<td>112</td>\n<td>p</td>\n</tr>\n<tr>\n<td>17</td>\n<td>DC1</td>\n<td>49</td>\n<td>1</td>\n<td>81</td>\n<td>Q</td>\n<td>113</td>\n<td>q</td>\n</tr>\n<tr>\n<td>18</td>\n<td>DC2</td>\n<td>50</td>\n<td>2</td>\n<td>82</td>\n<td>R</td>\n<td>114</td>\n<td>r</td>\n</tr>\n<tr>\n<td>19</td>\n<td>DC3</td>\n<td>51</td>\n<td>3</td>\n<td>83</td>\n<td>S</td>\n<td>115</td>\n<td>s</td>\n</tr>\n<tr>\n<td>20</td>\n<td>DC4</td>\n<td>52</td>\n<td>4</td>\n<td>84</td>\n<td>T</td>\n<td>116</td>\n<td>t</td>\n</tr>\n<tr>\n<td>21</td>\n<td>NAK</td>\n<td>53</td>\n<td>5</td>\n<td>85</td>\n<td>U</td>\n<td>117</td>\n<td>u</td>\n</tr>\n<tr>\n<td>22</td>\n<td>SYN</td>\n<td>54</td>\n<td>6</td>\n<td>86</td>\n<td>V</td>\n<td>118</td>\n<td>v</td>\n</tr>\n<tr>\n<td>23</td>\n<td>ETB</td>\n<td>55</td>\n<td>7</td>\n<td>87</td>\n<td>W</td>\n<td>119</td>\n<td>w</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CAN</td>\n<td>56</td>\n<td>8</td>\n<td>88</td>\n<td>X</td>\n<td>120</td>\n<td>x</td>\n</tr>\n<tr>\n<td>25</td>\n<td>EM</td>\n<td>57</td>\n<td>9</td>\n<td>89</td>\n<td>Y</td>\n<td>121</td>\n<td>y</td>\n</tr>\n<tr>\n<td>26</td>\n<td>SUB</td>\n<td>58</td>\n<td>:</td>\n<td>90</td>\n<td>Z</td>\n<td>122</td>\n<td>z</td>\n</tr>\n<tr>\n<td>27</td>\n<td>ESC</td>\n<td>59</td>\n<td>;</td>\n<td>91</td>\n<td>[</td>\n<td>123</td>\n<td>{</td>\n</tr>\n<tr>\n<td>28</td>\n<td>FS</td>\n<td>60</td>\n<td>&lt;</td>\n<td>92</td>\n<td>\\</td>\n<td>124</td>\n<td>|</td>\n</tr>\n<tr>\n<td>29</td>\n<td>GS</td>\n<td>61</td>\n<td>=</td>\n<td>93</td>\n<td>]</td>\n<td>125</td>\n<td>}</td>\n</tr>\n<tr>\n<td>30</td>\n<td>RS</td>\n<td>62</td>\n<td>&gt;</td>\n<td>94</td>\n<td>^</td>\n<td>126</td>\n<td>~</td>\n</tr>\n<tr>\n<td>31</td>\n<td>US</td>\n<td>63</td>\n<td>?</td>\n<td>95</td>\n<td>_</td>\n<td>127</td>\n<td>DEL</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"基本数据类型\">基本数据类型</h4>\n<ul>\n<li>基本类型\n<ul>\n<li>整型\n<ul>\n<li>有符号整型\n<ul>\n<li>char\n<ul>\n<li>范围：-128~127，对应的格式控制符为%c</li>\n</ul>\n</li>\n<li>short</li>\n<li>int\n<ul>\n<li>占用 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> 位,从<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><msup><mn>2</mn><mn>31</mn></msup></mrow><annotation encoding=\"application/x-tex\">-2^{31}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span></span></span></span>到<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>31</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{31}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">31</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，负数比正数多一个，对应的格式控制符为%d</li>\n</ul>\n</li>\n<li>long</li>\n<li>long long</li>\n</ul>\n</li>\n<li>无符号整型\n<ul>\n<li>unsigned char</li>\n<li>unsigned short</li>\n<li>unsigned int\n<ul>\n<li>取值范围为0~<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^{32}-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">32</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span>，对应的格式控制符为%u</li>\n</ul>\n</li>\n<li>unsigned long</li>\n<li>unsigned long long</li>\n</ul>\n</li>\n<li><strong>注意：整型和字符型的存储空间大小是平台相关的，可以互相兼容</strong></li>\n</ul>\n</li>\n<li>浮点型\n<ul>\n<li>单精度\n<ul>\n<li>float\n<ul>\n<li>数的浮点表示形式：阶码和尾数\n<ul>\n<li>阶码：用来表示数的次方，采用补码表示，占用一个字节，阶符位为0表示正数，为1表示负数</li>\n<li>尾数：用来表示数的有效数字，采用补码表示，占用三个字节</li>\n<li>范围<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>3.4</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>38</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pm 3.4*10^{38}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord\">3.4</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">38</span></span></span></span></span></span></span></span></span></span></span></span>，对应的格式控制符为%f</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>双精度\n<ul>\n<li>double\n<ul>\n<li>范围<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>±</mo><mn>1.7</mn><mo>∗</mo><mn>1</mn><msup><mn>0</mn><mn>308</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\pm 1.7*10^{308}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">±</span><span class=\"mord\">1.7</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">308</span></span></span></span></span></span></span></span></span></span></span></span>，对应的格式控制符为%lf</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符型</li>\n<li>枚举型</li>\n</ul>\n</li>\n<li>构造类型</li>\n<li>指针类型</li>\n<li>空类型</li>\n</ul>\n<h5 id=\"例子：体验实数的误差\">例子：体验实数的误差</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">float</span> d=<span class=\"number\">3.500001</span>,s;</span><br><span class=\"line\">  <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">int</span> s=<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1000000</span>;i++)&#123;</span><br><span class=\"line\">    s+=d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f\\n&quot;</span>,s); </span><br><span class=\"line\">  <span class=\"comment\">// 如果换成double类型，结果是3500001.000000</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子：整型数据的溢出\">例子：整型数据的溢出</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a=<span class=\"number\">2147483647</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,a+<span class=\"number\">1</span>); <span class=\"comment\">//输出结果为-2147483648</span></span><br><span class=\"line\">  <span class=\"comment\">// 原因：int类型的取值范围为-2147483648~2147483647，加上1之后就会溢出</span></span><br><span class=\"line\">  <span class=\"type\">int</span> b=<span class=\"number\">-2147483648</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,b<span class=\"number\">-1</span>); <span class=\"comment\">//输出结果为2147483647</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"例子：无符号输出负数\">例子：无符号输出负数</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> a=<span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%u\\n&quot;</span>,a); <span class=\"comment\">//输出结果为4294967295</span></span><br><span class=\"line\">  <span class=\"comment\">// 原因：-1的补码为11111111 11111111 11111111 11111111，转换为无符号数就是4294967295</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"常量\">常量</h4>\n<ul>\n<li>常量\n<ul>\n<li>整型常量\n<ul>\n<li>十进制</li>\n<li>八进制</li>\n<li>十六进制\n<ul>\n<li>0x00001</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>实型常量\n<ul>\n<li>小数表示</li>\n<li>科学计数法\n<ul>\n<li>2.5e-3，3.2e2</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符常量\n<ul>\n<li>一般字符常量\n<ul>\n<li>‘A’，‘a’</li>\n<li>‘a’-32=‘A’，在内存中存储的是ASCII码</li>\n</ul>\n</li>\n<li>转义常量\n<ul>\n<li>\\n 换行</li>\n<li>\\t 制表\n<ul>\n<li>8个字符为一个输出区，\\t表示跳到下一个输出区</li>\n</ul>\n</li>\n<li>\\r 回车</li>\n<li>\\b 退格</li>\n<li>\\f 换页</li>\n<li>\\0 空字符</li>\n<li>\\ooo 三位八进制\n<ul>\n<li>表示1~377的字符,可以不用前缀0</li>\n</ul>\n</li>\n<li>\\ddd 八进制</li>\n<li>\\xhh 十六进制</li>\n<li>\\\\ 反斜杠</li>\n<li>\\0 空字符\n<ul>\n<li>表示0的字符，用\\0比0更直观</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>字符串常量\n<ul>\n<li>字符串的存储占用多个字符的存储空间，结尾有一个\\0</li>\n<li>字符串和字符数组的区别\n<ul>\n<li>字符串是字符数组的一种特殊形式，一个字符占用一个字节</li>\n<li>字符串以\\0结尾</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>符号常量\n<ul>\n<li>#define PI 3.14159\n<ul>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换</li>\n</ul>\n</li>\n<li>const double PI = 3.14159<br>\n-const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"变量\">变量</h4>\n<p>变量必须先定义后使用，定义变量的格式为：数据类型 变量名;<br>\n符号名空间到逻辑地址，逻辑地址到物理地址<br>\n变量定义的规则：</p>\n<ul>\n<li>变量名由字母、数字、下划线组成，不能以数字开头\n<ul>\n<li>如：a1，<em>a，a</em>，_1，但是不能是1a</li>\n</ul>\n</li>\n<li>变量名区分大小写\n<ul>\n<li>如：a和A是两个不同的变量</li>\n</ul>\n</li>\n<li>不能使用C语言的关键字作为变量名</li>\n<li>sizeof()是唯一一个不是函数的运算符，它返回一个变量或者数据类型的字节数</li>\n</ul>\n<h5 id=\"例子：数据类型\">例子：数据类型</h5>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;转义字符：a\\nabc\\bfff\\a&quot;</span>) <span class=\"comment\">//输出结果为：a bcfff 一声响铃</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;整型常量：%d,%d,%d\\n&quot;</span>,<span class=\"number\">12</span>,<span class=\"number\">012</span>,<span class=\"number\">0x12</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;实型常量：%f,%f\\n&quot;</span>,<span class=\"number\">3.14</span>,<span class=\"number\">3.14e-2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;字符常量：%c,%c\\n&quot;</span>,<span class=\"string\">&#x27;A&#x27;</span>,<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;字符串常量：%s\\n&quot;</span>,<span class=\"string\">&quot;Hello,world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"整形数据的输入输出\">整形数据的输入输出</h2>\n<p>输入输出</p>\n<ul>\n<li>输入\n<ul>\n<li>scanf()\n<ul>\n<li>如果两个数字连续输入，可以使用空格、回车、制表符分隔</li>\n<li>如果两个数字连续输入，可以使用逗号分隔，但是两个数字之间必须加上逗号</li>\n<li>例如：scanf(“%d,%d”,&amp;a,&amp;b);必须输入1,2，不能输入1 2</li>\n<li><strong>scanf()中有\\n时必须回车</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输出\n<ul>\n<li>printf()</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"浮点型数据\">浮点型数据</h2>\n<h4 id=\"浮点数比大小\">浮点数比大小</h4>\n<p>注意：两个浮点数比大小时，<strong>不能直接用==</strong>，因为浮点数在计算机中是以二进制形式存储的，有时候会有误差，使用 $$|a-b|&lt;10^{-6}$$ 来判断两个浮点数是否相等,其中 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>6</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">10^{-6}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span></span> 是一个机器精度</p>\n<h4 id=\"浮点数修饰\">浮点数修饰</h4>\n<ul>\n<li>%f\n<ul>\n<li>默认保留6位小数</li>\n<li>%.2f保留两位小数</li>\n</ul>\n</li>\n<li>%-10.2f\n<ul>\n<li>左对齐，保留两位小数</li>\n</ul>\n</li>\n<li>%10.2f\n<ul>\n<li>右对齐，保留两位小数</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"字符的输入输出\">字符的输入输出</h4>\n<ul>\n<li>输入\n<ul>\n<li>scanf(“%c%c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入ab，那么a=‘a’,b=‘b’</li>\n<li>如果输入a b，那么a=‘a’,b=’ ’</li>\n</ul>\n</li>\n<li>scanf(“%c %c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入ab，那么a=‘a’,b=‘b’</li>\n<li>如果输入a b，那么a=‘a’,b=‘b’</li>\n</ul>\n</li>\n<li>scanf(“%c,%c”,&amp;a,&amp;b);\n<ul>\n<li>如果输入a,b，那么a=‘a’,b=‘b’</li>\n</ul>\n</li>\n<li>getchar()\n<ul>\n<li>从键盘输入一个字符，不需要回车</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>输出\n<ul>\n<li>printf(“%c%c”,a,b);\n<ul>\n<li>输出ab</li>\n</ul>\n</li>\n<li>putchar(a);\n<ul>\n<li>输出a</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"指针\">指针</h2>\n<ul>\n<li>指针是一个变量，它的值是一个地址</li>\n<li>指针变量的定义\n<ul>\n<li>数据类型 *指针变量名;</li>\n<li>int *p;</li>\n</ul>\n</li>\n<li>指针变量的赋值\n<ul>\n<li>p=&amp;a;</li>\n<li>p=a;</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数据类型转换\">数据类型转换</h2>\n<ul>\n<li>自动类型转换\n<ul>\n<li>当两个不同类型的数据进行运算时，系统会自动将其中一个数据类型转换为另一个数据类型</li>\n<li>规则\n<ul>\n<li>如果两个操作数中有一个是double类型，另一个操作数就会转换为double类型</li>\n<li>如果两个操作数中有一个是float类型，另一个操作数就会转换为float类型</li>\n<li>如果两个操作数中有一个是long类型，另一个操作数就会转换为long类型</li>\n<li>如果两个操作数中有一个是unsigned int类型，另一个操作数就会转换为unsigned int类型</li>\n<li>如果两个操作数中有一个是int类型，另一个操作数就会转换为int类型</li>\n</ul>\n</li>\n<li>优先级\n<ul>\n<li>double &gt; float &gt; long &gt; unsigned int &gt; int</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>赋值转换\n<ul>\n<li>当一个数据类型的值赋给另一个数据类型的变量时，系统会自动将一个数据类型转换为另一个数据类型</li>\n<li>当实型赋值给整型时，小数部分会被截断，字符型赋值给整型时，会将字符的ASCII码赋给整型</li>\n</ul>\n</li>\n<li>强制类型转换\n<ul>\n<li>(数据类型)表达式</li>\n<li>例如：(int)3.14</li>\n<li>注意：强制类型转换会改变数据的存储方式，可能会改变数据的值</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"输入输出\">输入输出</h2>\n<ul>\n<li>printf\n<ul>\n<li>%[-][m.n] 格式控制符\n<ul>\n<li>-表示左对齐</li>\n<li>m表示最小宽度</li>\n<li>n表示小数位数</li>\n</ul>\n</li>\n<li>++i 和 i++的区别\n<ul>\n<li>++i表示先加1再使用</li>\n<li>i++表示先使用再加1\n<ul>\n<li>如:printf(“%d%d%d”,++i,++i,++i) i=1,输出4，3，2</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>scanf\n<ul>\n<li>scanf(“格式输入字符”,内存地址)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"运算符\">运算符</h2>\n<h3 id=\"算术运算符\">算术运算符</h3>\n<ul>\n<li>“+ - * / %”\n<ul>\n<li>/表示整数除法，%表示取余</li>\n<li>例如：5/2=2,5%2=1</li>\n<li>%的运算结果与被除数的符号相同</li>\n<li>整型存在以下等式：a%b=a-(a/b)*b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关系运算符\">关系运算符</h3>\n<ul>\n<li>“&gt; &lt; &gt;= &lt;= == !=”\n<ul>\n<li>例如：a&gt;b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逻辑运算符\">逻辑运算符</h3>\n<ul>\n<li>“&amp;&amp; || !”\n<ul>\n<li>例如：a&gt;b&amp;&amp;a&gt;c</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"位运算符\">位运算符</h3>\n<ul>\n<li>“&amp; | ^ ~ &lt;&lt; &gt;&gt;”\n<ul>\n<li>例如：a&amp;b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"赋值运算符\">赋值运算符</h3>\n<ul>\n<li>“= += -= *= /= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=”\n<ul>\n<li>例如：a+=b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"条件运算符\">条件运算符</h3>\n<ul>\n<li>表达式1?表达式2:表达式3\n<ul>\n<li>例如：a&gt;b?a:b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"逗号运算符\">逗号运算符</h3>\n<ul>\n<li>表达式1,表达式2\n<ul>\n<li>例如：a,b</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"优先级和结合性\">优先级和结合性</h3>\n<ul>\n<li>优先级\n<ul>\n<li>逗号运算符 &gt; 赋值运算符 &gt; 条件运算符 &gt; 逻辑或运算符 &gt; 逻辑与运算符 &gt; 位或运算符 &gt; 位异或运算符 &gt; 位与运算符 &gt; 关系运算符 &gt; 移位运算符 &gt; 加减运算符 &gt; 乘除取余运算符</li>\n<li>优先级相同的运算符，从左到右结合</li>\n</ul>\n</li>\n<li>结合性\n<ul>\n<li>从左到右，例如：a+b+c 从左到右</li>\n<li>从右到左，例如：a=b=c 从右到左</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译预处理\">编译预处理</h2>\n<h3 id=\"宏定义\">宏定义</h3>\n<ul>\n<li>#define PI 3.14159\n<ul>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换</li>\n<li>宏定义的好处\n<ul>\n<li>提高程序的可读性</li>\n<li>提高程序的可维护性</li>\n<li>提高程序的可移植性</li>\n<li>提高程序的执行效率</li>\n</ul>\n</li>\n<li>取消宏定义\n<ul>\n<li>#undef</li>\n</ul>\n</li>\n<li>含参宏定义\n<ul>\n<li>#define MAX(a,b) ((a)&gt;(b)?(a):(b))</li>\n<li>注意：含参宏定义不是函数，不会检查参数的类型，只是简单的文本替换，不分配内存空间</li>\n</ul>\n</li>\n<li>和const的区别\n<ul>\n<li>const是C语言的关键字，const修饰的变量是只读的，凡是const定义的变量不能出现在赋值号的左侧，它是一个左值</li>\n<li>#define不是C语言的一部分，是预处理命令，不能以分号结尾</li>\n<li>#define没有数据类型，只是简单的文本替换，而const有数据类型</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"条件编译\">条件编译</h3>\n<ul>\n<li>#if #else #elif #endif\n<ul>\n<li>#if 0\n<ul>\n<li>用于注释掉一段代码</li>\n</ul>\n</li>\n<li>#ifdef\n<ul>\n<li>如果定义了宏，就编译</li>\n</ul>\n</li>\n<li>#ifndef\n<ul>\n<li>如果没有定义宏，就编译</li>\n</ul>\n</li>\n<li>#undef\n<ul>\n<li>取消宏定义</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"文件包含\">文件包含</h3>\n<ul>\n<li>#include\n<ul>\n<li>#include &lt;stdio.h&gt;\n<ul>\n<li>用于包含系统</li>\n</ul>\n</li>\n<li>写法：双引号和尖括号\n<ul>\n<li>#include “stdio.h”</li>\n<li>#include &lt;stdio.h&gt;</li>\n<li>区别：双引号表示在当前目录下查找，尖括号表示在系统目录下查找</li>\n</ul>\n</li>\n<li>说明：\n<ul>\n<li>#include不是C语言的一部分，是预处理命令</li>\n<li>在包含的文件中不能出现main函数</li>\n<li>包含的文件可以是C语言源文件，也可以是头文件</li>\n<li>文件允许嵌套包含</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"附录\">附录</h2>\n<h3 id=\"常用函数及其用法总结\">常用函数及其用法总结</h3>\n<h4 id=\"rand-与-srand\">rand() 与 srand()</h4>\n<ul>\n<li>rand()函数\n<ul>\n<li>用于生成一个随机数</li>\n<li>用法：int a = rand();</li>\n<li>生成范围：0~RAND_MAX</li>\n<li>范围控制\n<ul>\n<li>生成(a,b)之间的随机数：a+rand()%(b-a)</li>\n<li>生成[a,b]之间的随机数：a+rand()%(b-a+1)</li>\n<li>生成[a,b)之间的随机数：a+rand()%(b-a)</li>\n<li>生成(a,b]之间的随机数：a+rand()%(b-a+1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>srand()函数\n<ul>\n<li>用于生成一个随机数种子</li>\n<li>用法：srand((unsigned)time(NULL));</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"例题\">例题</h5>\n<p>以下代码用于生成三个16~64之间的随机数，并判断是否有两个数相等</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;time.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    srand(time(<span class=\"number\">0</span>));  <span class=\"comment\">// 使用当前时间作为随机数种子</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> min = <span class=\"number\">16</span>, max = <span class=\"number\">64</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> num1 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\">    <span class=\"type\">int</span> num2 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\">    <span class=\"type\">int</span> num3 = min + rand() % (max + <span class=\"number\">1</span> - min);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;The three numbers are: %d, %d, %d\\n&quot;</span>, num1, num2, num3);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num1 == num2 || num1 == num3 || num2 == num3) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Yes\\n&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;No\\n&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    system(<span class=\"string\">&quot;pause&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Java 从入门到入坟","date":"2024-03-07T12:00:00.000Z","cover":"https://img2.imgtp.com/2024/05/26/E5a3RZxj.jpg","_content":"\n# <center>Java 从入门到入坟</center>\n\n---\n## 目录\n- [Java 从入门到入坟](#java-从入门到入坟)\n  - [目录](#目录)\n  - [第一章：Java代码及项目结构](#第一章java代码及项目结构)\n    - [Part1：Java代码及项目结构](#part1java代码及项目结构)\n    - [Part2：Java基本数据类型及语法](#part2java基本数据类型及语法)\n\n---\n\n## 第一章：Java代码及项目结构\n### Part1：Java代码及项目结构\n\n一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n1. 类\n   1. 类是对象的模板，相当于图纸，用于描述对象的属性和行为。\n      1. 如：人类有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。那么人类就是一个类。而张三就是这个类的一个实例，所以张三也会有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。\n   2. 类是Java程序的基本单元，一个Java程序可以包含多个类。\n   3. 类的定义包括类的名称、类的属性和类的方法。\n2. 对象\n   1. 对象是类的实例，是类的具体化。如上述的张三就是人类的一个实例。\n3. 方法\n   1. 方法是类的行为，是类的功能。\n\n示例代码：\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n其中：HelloWorld是类名，main是方法名，public static void是方法的修饰符，String[] args是方法的参数，System.out.println(\"Hello World!\");是方法的内容。而程序的入口是main方法，它是一个特殊的方法，是程序的入口，所有的Java程序都从main方法开始执行。\n\n如图\n![Java第一行结构](https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg)\n\nJava程序的基本结构如下：\n1. 包声明\n   1. 包声明语句必须是程序的第一条语句。\n   2. 包的作用是对类和接口进行分类管理。\n   3. 包名的命名规则是全部小写。\n   4. 包名之间使用\".\"分隔。\n   5. 包名的命名规范是使用公司域名倒序，如：com.runoob.test。\n2. 导入类\n   1. 导入类语句可以出现在包声明之后，类定义之前。\n   2. 导入类语句的作用是引入一个类，以便在程序中引用这个类。\n   3. 导入类语句可以使用通配符\"*\"，表示导入包下的所有类。\n3. 类\n   1. 类是Java程序的基本单元。\n   2. 类的定义包括类的名称、类的属性和类的方法。\n   3. 类的属性是类的成员变量，类的方法是类的成员方法。\n   4. 类的属性和方法的访问修饰符有public、protected、private和默认。\n4. 方法\n   1. 方法是类的行为，是类的功能。\n   2. 方法的定义包括方法的修饰符、方法的返回值类型、方法的名称和方法的参数。\n   3. 方法的修饰符有public、protected、private和默认。\n   4. 方法的返回值类型是方法的返回值的数据类型。\n   5. 方法的名称是方法的标识符。\n   6. 方法的参数是方法的输入。\n5. 语句\n   1. 语句是Java程序的基本执行单元。\n   2. 语句的定义包括声明语句、赋值语句、条件语句、循环语句和方法调用语句。\n   3. 声明语句是声明一个变量。\n   4. 赋值语句是给变量赋值。\n   5. 条件语句是根据条件执行不同的语句。\n   6. 循环语句是重复执行一段语句。\n   7. 方法调用语句是调用一个方法。\n\n示例代码：\n```java\npackage com.mycompany.function;    // 包声明\nimport java.util.Scanner;   // 导入Scanner类\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入一个整数：\");\n        int num = scanner.nextInt();\n        System.out.println(\"你输入的整数是：\" + num);\n    }\n}\n```\n\n### Part2：Java基本数据类型及语法\nJava的基本数据类型包括：整型、浮点型、字符型、布尔型、字符串型。\n1. 整型\n   1. 整型是Java的基本数据类型之一，用于表示整数。\n   2. 整型的数据类型有byte、short、int、long。\n   3. 整型的取值范围不同，byte的取值范围是-128~127，short的取值范围是-32768~32767，int的取值范围是-2147483648~2147483647，long的取值范围是-9223372036854775808~9223372036854775807。\n   4. 整型的默认值是0。\n2. 浮点型\n   1. 浮点型是Java的基本数据类型之一，用于表示小数。\n   2. 浮点型的数据类型有float、double。\n   3. 浮点型的取值范围不同，float的取值范围是1.4E-45~3.4028235E38，double的取值范围是4.9E-324~1.7976931348623157E308。\n   4. 浮点型的默认值是0.0。\n3. 字符型\n   1. 字符型是Java的基本数据类型之一，用于表示字符。\n   2. 字符型的数据类型是char。\n   3. 字符型的取值范围是0~65535。\n   4. 字符型的默认值是'\\u0000'。\n4. 布尔型\n   1. 布尔型是Java的基本数据类型之一，用于表示真假。\n   2. 布尔型的数据类型是boolean。\n   3. 布尔型的取值范围是true、false。\n   4. 布尔型的默认值是false。\n5. 字符串型\n   1. 字符串型是Java的引用数据类型之一，用于表示字符串。\n   2. 字符串型的数据类型是String。\n   3. 字符串型的默认值是null。\n6. 基本数据类型的转换\n   1. 基本数据类型的转换包括自动类型转换和强制类型转换。\n   2. 自动类型转换是指将一个小的数据类型转换为一个大的数据类型，如：int num = 10; double d = num;。\n   3. 强制类型转换是指将一个大的数据类型转换为一个小的数据类型，如：double d = 10.5; int num = (int)d;。\n\n","source":"_posts/java.md","raw":"---\ntitle: Java 从入门到入坟\ndate: 2024-3-7 20:00:00\ntags: \n- 程序设计\n- Java\ncategories: 程序设计\ncover: https://img2.imgtp.com/2024/05/26/E5a3RZxj.jpg\n---\n\n# <center>Java 从入门到入坟</center>\n\n---\n## 目录\n- [Java 从入门到入坟](#java-从入门到入坟)\n  - [目录](#目录)\n  - [第一章：Java代码及项目结构](#第一章java代码及项目结构)\n    - [Part1：Java代码及项目结构](#part1java代码及项目结构)\n    - [Part2：Java基本数据类型及语法](#part2java基本数据类型及语法)\n\n---\n\n## 第一章：Java代码及项目结构\n### Part1：Java代码及项目结构\n\n一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n1. 类\n   1. 类是对象的模板，相当于图纸，用于描述对象的属性和行为。\n      1. 如：人类有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。那么人类就是一个类。而张三就是这个类的一个实例，所以张三也会有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。\n   2. 类是Java程序的基本单元，一个Java程序可以包含多个类。\n   3. 类的定义包括类的名称、类的属性和类的方法。\n2. 对象\n   1. 对象是类的实例，是类的具体化。如上述的张三就是人类的一个实例。\n3. 方法\n   1. 方法是类的行为，是类的功能。\n\n示例代码：\n```java\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n    }\n}\n```\n其中：HelloWorld是类名，main是方法名，public static void是方法的修饰符，String[] args是方法的参数，System.out.println(\"Hello World!\");是方法的内容。而程序的入口是main方法，它是一个特殊的方法，是程序的入口，所有的Java程序都从main方法开始执行。\n\n如图\n![Java第一行结构](https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg)\n\nJava程序的基本结构如下：\n1. 包声明\n   1. 包声明语句必须是程序的第一条语句。\n   2. 包的作用是对类和接口进行分类管理。\n   3. 包名的命名规则是全部小写。\n   4. 包名之间使用\".\"分隔。\n   5. 包名的命名规范是使用公司域名倒序，如：com.runoob.test。\n2. 导入类\n   1. 导入类语句可以出现在包声明之后，类定义之前。\n   2. 导入类语句的作用是引入一个类，以便在程序中引用这个类。\n   3. 导入类语句可以使用通配符\"*\"，表示导入包下的所有类。\n3. 类\n   1. 类是Java程序的基本单元。\n   2. 类的定义包括类的名称、类的属性和类的方法。\n   3. 类的属性是类的成员变量，类的方法是类的成员方法。\n   4. 类的属性和方法的访问修饰符有public、protected、private和默认。\n4. 方法\n   1. 方法是类的行为，是类的功能。\n   2. 方法的定义包括方法的修饰符、方法的返回值类型、方法的名称和方法的参数。\n   3. 方法的修饰符有public、protected、private和默认。\n   4. 方法的返回值类型是方法的返回值的数据类型。\n   5. 方法的名称是方法的标识符。\n   6. 方法的参数是方法的输入。\n5. 语句\n   1. 语句是Java程序的基本执行单元。\n   2. 语句的定义包括声明语句、赋值语句、条件语句、循环语句和方法调用语句。\n   3. 声明语句是声明一个变量。\n   4. 赋值语句是给变量赋值。\n   5. 条件语句是根据条件执行不同的语句。\n   6. 循环语句是重复执行一段语句。\n   7. 方法调用语句是调用一个方法。\n\n示例代码：\n```java\npackage com.mycompany.function;    // 包声明\nimport java.util.Scanner;   // 导入Scanner类\npublic class HelloWorld {\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"请输入一个整数：\");\n        int num = scanner.nextInt();\n        System.out.println(\"你输入的整数是：\" + num);\n    }\n}\n```\n\n### Part2：Java基本数据类型及语法\nJava的基本数据类型包括：整型、浮点型、字符型、布尔型、字符串型。\n1. 整型\n   1. 整型是Java的基本数据类型之一，用于表示整数。\n   2. 整型的数据类型有byte、short、int、long。\n   3. 整型的取值范围不同，byte的取值范围是-128~127，short的取值范围是-32768~32767，int的取值范围是-2147483648~2147483647，long的取值范围是-9223372036854775808~9223372036854775807。\n   4. 整型的默认值是0。\n2. 浮点型\n   1. 浮点型是Java的基本数据类型之一，用于表示小数。\n   2. 浮点型的数据类型有float、double。\n   3. 浮点型的取值范围不同，float的取值范围是1.4E-45~3.4028235E38，double的取值范围是4.9E-324~1.7976931348623157E308。\n   4. 浮点型的默认值是0.0。\n3. 字符型\n   1. 字符型是Java的基本数据类型之一，用于表示字符。\n   2. 字符型的数据类型是char。\n   3. 字符型的取值范围是0~65535。\n   4. 字符型的默认值是'\\u0000'。\n4. 布尔型\n   1. 布尔型是Java的基本数据类型之一，用于表示真假。\n   2. 布尔型的数据类型是boolean。\n   3. 布尔型的取值范围是true、false。\n   4. 布尔型的默认值是false。\n5. 字符串型\n   1. 字符串型是Java的引用数据类型之一，用于表示字符串。\n   2. 字符串型的数据类型是String。\n   3. 字符串型的默认值是null。\n6. 基本数据类型的转换\n   1. 基本数据类型的转换包括自动类型转换和强制类型转换。\n   2. 自动类型转换是指将一个小的数据类型转换为一个大的数据类型，如：int num = 10; double d = num;。\n   3. 强制类型转换是指将一个大的数据类型转换为一个小的数据类型，如：double d = 10.5; int num = (int)d;。\n\n","slug":"java","published":1,"updated":"2024-05-26T14:02:41.147Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwnoxp0k0003zsuhaav52fmx","content":"<h1><center>Java 从入门到入坟</center></h1>\n<hr>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#java-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F\">Java 从入门到入坟</a>\n<ul>\n<li><a href=\"#%E7%9B%AE%E5%BD%95\">目录</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0java%E4%BB%A3%E7%A0%81%E5%8F%8A%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">第一章：Java代码及项目结构</a>\n<ul>\n<li><a href=\"#part1java%E4%BB%A3%E7%A0%81%E5%8F%8A%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">Part1：Java代码及项目结构</a></li>\n<li><a href=\"#part2java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E6%B3%95\">Part2：Java基本数据类型及语法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"第一章：Java代码及项目结构\">第一章：Java代码及项目结构</h2>\n<h3 id=\"Part1：Java代码及项目结构\">Part1：Java代码及项目结构</h3>\n<p>一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ol>\n<li>类\n<ol>\n<li>类是对象的模板，相当于图纸，用于描述对象的属性和行为。\n<ol>\n<li>如：人类有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。那么人类就是一个类。而张三就是这个类的一个实例，所以张三也会有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。</li>\n</ol>\n</li>\n<li>类是Java程序的基本单元，一个Java程序可以包含多个类。</li>\n<li>类的定义包括类的名称、类的属性和类的方法。</li>\n</ol>\n</li>\n<li>对象\n<ol>\n<li>对象是类的实例，是类的具体化。如上述的张三就是人类的一个实例。</li>\n</ol>\n</li>\n<li>方法\n<ol>\n<li>方法是类的行为，是类的功能。</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中：HelloWorld是类名，main是方法名，public static void是方法的修饰符，String[] args是方法的参数，System.out.println(“Hello World!”);是方法的内容。而程序的入口是main方法，它是一个特殊的方法，是程序的入口，所有的Java程序都从main方法开始执行。</p>\n<p>如图<br>\n<img src=\"https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg\" alt=\"Java第一行结构\"></p>\n<p>Java程序的基本结构如下：</p>\n<ol>\n<li>包声明\n<ol>\n<li>包声明语句必须是程序的第一条语句。</li>\n<li>包的作用是对类和接口进行分类管理。</li>\n<li>包名的命名规则是全部小写。</li>\n<li>包名之间使用&quot;.&quot;分隔。</li>\n<li>包名的命名规范是使用公司域名倒序，如：com.runoob.test。</li>\n</ol>\n</li>\n<li>导入类\n<ol>\n<li>导入类语句可以出现在包声明之后，类定义之前。</li>\n<li>导入类语句的作用是引入一个类，以便在程序中引用这个类。</li>\n<li>导入类语句可以使用通配符&quot;*&quot;，表示导入包下的所有类。</li>\n</ol>\n</li>\n<li>类\n<ol>\n<li>类是Java程序的基本单元。</li>\n<li>类的定义包括类的名称、类的属性和类的方法。</li>\n<li>类的属性是类的成员变量，类的方法是类的成员方法。</li>\n<li>类的属性和方法的访问修饰符有public、protected、private和默认。</li>\n</ol>\n</li>\n<li>方法\n<ol>\n<li>方法是类的行为，是类的功能。</li>\n<li>方法的定义包括方法的修饰符、方法的返回值类型、方法的名称和方法的参数。</li>\n<li>方法的修饰符有public、protected、private和默认。</li>\n<li>方法的返回值类型是方法的返回值的数据类型。</li>\n<li>方法的名称是方法的标识符。</li>\n<li>方法的参数是方法的输入。</li>\n</ol>\n</li>\n<li>语句\n<ol>\n<li>语句是Java程序的基本执行单元。</li>\n<li>语句的定义包括声明语句、赋值语句、条件语句、循环语句和方法调用语句。</li>\n<li>声明语句是声明一个变量。</li>\n<li>赋值语句是给变量赋值。</li>\n<li>条件语句是根据条件执行不同的语句。</li>\n<li>循环语句是重复执行一段语句。</li>\n<li>方法调用语句是调用一个方法。</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mycompany.function;    <span class=\"comment\">// 包声明</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;   <span class=\"comment\">// 导入Scanner类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一个整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的整数是：&quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Part2：Java基本数据类型及语法\">Part2：Java基本数据类型及语法</h3>\n<p>Java的基本数据类型包括：整型、浮点型、字符型、布尔型、字符串型。</p>\n<ol>\n<li>整型\n<ol>\n<li>整型是Java的基本数据类型之一，用于表示整数。</li>\n<li>整型的数据类型有byte、short、int、long。</li>\n<li>整型的取值范围不同，byte的取值范围是-128~127，short的取值范围是-32768~32767，int的取值范围是-2147483648~2147483647，long的取值范围是-9223372036854775808~9223372036854775807。</li>\n<li>整型的默认值是0。</li>\n</ol>\n</li>\n<li>浮点型\n<ol>\n<li>浮点型是Java的基本数据类型之一，用于表示小数。</li>\n<li>浮点型的数据类型有float、double。</li>\n<li>浮点型的取值范围不同，float的取值范围是1.4E-45~3.4028235E38，double的取值范围是4.9E-324~1.7976931348623157E308。</li>\n<li>浮点型的默认值是0.0。</li>\n</ol>\n</li>\n<li>字符型\n<ol>\n<li>字符型是Java的基本数据类型之一，用于表示字符。</li>\n<li>字符型的数据类型是char。</li>\n<li>字符型的取值范围是0~65535。</li>\n<li>字符型的默认值是’\\u0000’。</li>\n</ol>\n</li>\n<li>布尔型\n<ol>\n<li>布尔型是Java的基本数据类型之一，用于表示真假。</li>\n<li>布尔型的数据类型是boolean。</li>\n<li>布尔型的取值范围是true、false。</li>\n<li>布尔型的默认值是false。</li>\n</ol>\n</li>\n<li>字符串型\n<ol>\n<li>字符串型是Java的引用数据类型之一，用于表示字符串。</li>\n<li>字符串型的数据类型是String。</li>\n<li>字符串型的默认值是null。</li>\n</ol>\n</li>\n<li>基本数据类型的转换\n<ol>\n<li>基本数据类型的转换包括自动类型转换和强制类型转换。</li>\n<li>自动类型转换是指将一个小的数据类型转换为一个大的数据类型，如：int num = 10; double d = num;。</li>\n<li>强制类型转换是指将一个大的数据类型转换为一个小的数据类型，如：double d = 10.5; int num = (int)d;。</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1><center>Java 从入门到入坟</center></h1>\n<hr>\n<h2 id=\"目录\">目录</h2>\n<ul>\n<li><a href=\"#java-%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9D%9F\">Java 从入门到入坟</a>\n<ul>\n<li><a href=\"#%E7%9B%AE%E5%BD%95\">目录</a></li>\n<li><a href=\"#%E7%AC%AC%E4%B8%80%E7%AB%A0java%E4%BB%A3%E7%A0%81%E5%8F%8A%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">第一章：Java代码及项目结构</a>\n<ul>\n<li><a href=\"#part1java%E4%BB%A3%E7%A0%81%E5%8F%8A%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84\">Part1：Java代码及项目结构</a></li>\n<li><a href=\"#part2java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E8%AF%AD%E6%B3%95\">Part2：Java基本数据类型及语法</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"第一章：Java代码及项目结构\">第一章：Java代码及项目结构</h2>\n<h3 id=\"Part1：Java代码及项目结构\">Part1：Java代码及项目结构</h3>\n<p>一个Java程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ol>\n<li>类\n<ol>\n<li>类是对象的模板，相当于图纸，用于描述对象的属性和行为。\n<ol>\n<li>如：人类有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。那么人类就是一个类。而张三就是这个类的一个实例，所以张三也会有姓名、年龄、性别等属性，有吃饭、睡觉、工作等行为。</li>\n</ol>\n</li>\n<li>类是Java程序的基本单元，一个Java程序可以包含多个类。</li>\n<li>类的定义包括类的名称、类的属性和类的方法。</li>\n</ol>\n</li>\n<li>对象\n<ol>\n<li>对象是类的实例，是类的具体化。如上述的张三就是人类的一个实例。</li>\n</ol>\n</li>\n<li>方法\n<ol>\n<li>方法是类的行为，是类的功能。</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中：HelloWorld是类名，main是方法名，public static void是方法的修饰符，String[] args是方法的参数，System.out.println(“Hello World!”);是方法的内容。而程序的入口是main方法，它是一个特殊的方法，是程序的入口，所有的Java程序都从main方法开始执行。</p>\n<p>如图<br>\n<img src=\"https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg\" alt=\"Java第一行结构\"></p>\n<p>Java程序的基本结构如下：</p>\n<ol>\n<li>包声明\n<ol>\n<li>包声明语句必须是程序的第一条语句。</li>\n<li>包的作用是对类和接口进行分类管理。</li>\n<li>包名的命名规则是全部小写。</li>\n<li>包名之间使用&quot;.&quot;分隔。</li>\n<li>包名的命名规范是使用公司域名倒序，如：com.runoob.test。</li>\n</ol>\n</li>\n<li>导入类\n<ol>\n<li>导入类语句可以出现在包声明之后，类定义之前。</li>\n<li>导入类语句的作用是引入一个类，以便在程序中引用这个类。</li>\n<li>导入类语句可以使用通配符&quot;*&quot;，表示导入包下的所有类。</li>\n</ol>\n</li>\n<li>类\n<ol>\n<li>类是Java程序的基本单元。</li>\n<li>类的定义包括类的名称、类的属性和类的方法。</li>\n<li>类的属性是类的成员变量，类的方法是类的成员方法。</li>\n<li>类的属性和方法的访问修饰符有public、protected、private和默认。</li>\n</ol>\n</li>\n<li>方法\n<ol>\n<li>方法是类的行为，是类的功能。</li>\n<li>方法的定义包括方法的修饰符、方法的返回值类型、方法的名称和方法的参数。</li>\n<li>方法的修饰符有public、protected、private和默认。</li>\n<li>方法的返回值类型是方法的返回值的数据类型。</li>\n<li>方法的名称是方法的标识符。</li>\n<li>方法的参数是方法的输入。</li>\n</ol>\n</li>\n<li>语句\n<ol>\n<li>语句是Java程序的基本执行单元。</li>\n<li>语句的定义包括声明语句、赋值语句、条件语句、循环语句和方法调用语句。</li>\n<li>声明语句是声明一个变量。</li>\n<li>赋值语句是给变量赋值。</li>\n<li>条件语句是根据条件执行不同的语句。</li>\n<li>循环语句是重复执行一段语句。</li>\n<li>方法调用语句是调用一个方法。</li>\n</ol>\n</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.mycompany.function;    <span class=\"comment\">// 包声明</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;   <span class=\"comment\">// 导入Scanner类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入一个整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> scanner.nextInt();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;你输入的整数是：&quot;</span> + num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Part2：Java基本数据类型及语法\">Part2：Java基本数据类型及语法</h3>\n<p>Java的基本数据类型包括：整型、浮点型、字符型、布尔型、字符串型。</p>\n<ol>\n<li>整型\n<ol>\n<li>整型是Java的基本数据类型之一，用于表示整数。</li>\n<li>整型的数据类型有byte、short、int、long。</li>\n<li>整型的取值范围不同，byte的取值范围是-128~127，short的取值范围是-32768~32767，int的取值范围是-2147483648~2147483647，long的取值范围是-9223372036854775808~9223372036854775807。</li>\n<li>整型的默认值是0。</li>\n</ol>\n</li>\n<li>浮点型\n<ol>\n<li>浮点型是Java的基本数据类型之一，用于表示小数。</li>\n<li>浮点型的数据类型有float、double。</li>\n<li>浮点型的取值范围不同，float的取值范围是1.4E-45~3.4028235E38，double的取值范围是4.9E-324~1.7976931348623157E308。</li>\n<li>浮点型的默认值是0.0。</li>\n</ol>\n</li>\n<li>字符型\n<ol>\n<li>字符型是Java的基本数据类型之一，用于表示字符。</li>\n<li>字符型的数据类型是char。</li>\n<li>字符型的取值范围是0~65535。</li>\n<li>字符型的默认值是’\\u0000’。</li>\n</ol>\n</li>\n<li>布尔型\n<ol>\n<li>布尔型是Java的基本数据类型之一，用于表示真假。</li>\n<li>布尔型的数据类型是boolean。</li>\n<li>布尔型的取值范围是true、false。</li>\n<li>布尔型的默认值是false。</li>\n</ol>\n</li>\n<li>字符串型\n<ol>\n<li>字符串型是Java的引用数据类型之一，用于表示字符串。</li>\n<li>字符串型的数据类型是String。</li>\n<li>字符串型的默认值是null。</li>\n</ol>\n</li>\n<li>基本数据类型的转换\n<ol>\n<li>基本数据类型的转换包括自动类型转换和强制类型转换。</li>\n<li>自动类型转换是指将一个小的数据类型转换为一个大的数据类型，如：int num = 10; double d = num;。</li>\n<li>强制类型转换是指将一个大的数据类型转换为一个小的数据类型，如：double d = 10.5; int num = (int)d;。</li>\n</ol>\n</li>\n</ol>\n"},{"title":"送东阳马生序","date":"2024-05-26T14:14:45.000Z","cover":"https://img2.imgtp.com/2024/05/26/uq689k7f.jpg","_content":"# 送东阳马生序\n#### 宋濂（明）\n\n<font face=STSong>\n<font size=4>\n\n&nbsp; &nbsp;余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 。又患无硕师名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。\n\n&nbsp; &nbsp;当余之从师也，负箧曳屣行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意，以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？\n\n&nbsp; &nbsp;今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！\n\n&nbsp; &nbsp;东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达。与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！\n\n</font>\n</font>","source":"_posts/送东阳马生序.md","raw":"---\ntitle: 送东阳马生序\ndate: 2024-05-26 22:14:45\ntags: \n- 文学\n- 生活\ncategories: 文学\ncover: https://img2.imgtp.com/2024/05/26/uq689k7f.jpg\n---\n# 送东阳马生序\n#### 宋濂（明）\n\n<font face=STSong>\n<font size=4>\n\n&nbsp; &nbsp;余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 。又患无硕师名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。\n\n&nbsp; &nbsp;当余之从师也，负箧曳屣行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意，以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？\n\n&nbsp; &nbsp;今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！\n\n&nbsp; &nbsp;东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达。与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！\n\n</font>\n</font>","slug":"送东阳马生序","published":1,"updated":"2024-05-26T14:24:50.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clwnoxp0n0007zsuh87rpa1j3","content":"<h1>送东阳马生序</h1>\n<h4 id=\"宋濂（明）\">宋濂（明）</h4>\n<font face=STSong>\n<font size=4>\n<p>   余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 。又患无硕师名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p>\n<p>   当余之从师也，负箧曳屣行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意，以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p>\n<p>   今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p>\n<p>   东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达。与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！</p>\n</font>\n</font>","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h1>送东阳马生序</h1>\n<h4 id=\"宋濂（明）\">宋濂（明）</h4>\n<font face=STSong>\n<font size=4>\n<p>   余幼时即嗜学。家贫，无从致书以观，每假借于藏书之家，手自笔录，计日以还。天大寒，砚冰坚，手指不可屈伸，弗之怠。录毕，走送之，不敢稍逾约。以是人多以书假余，余因得遍观群书。既加冠，益慕圣贤之道 。又患无硕师名人与游，尝趋百里外，从乡之先达执经叩问。先达德隆望尊，门人弟子填其室，未尝稍降辞色。余立侍左右，援疑质理，俯身倾耳以请；或遇其叱咄，色愈恭，礼愈至，不敢出一言以复；俟其欣悦，则又请焉。故余虽愚，卒获有所闻。</p>\n<p>   当余之从师也，负箧曳屣行深山巨谷中。穷冬烈风，大雪深数尺，足肤皲裂而不知。至舍，四支僵劲不能动，媵人持汤沃灌，以衾拥覆，久而乃和。寓逆旅，主人日再食，无鲜肥滋味之享。同舍生皆被绮绣，戴朱缨宝饰之帽，腰白玉之环，左佩刀，右备容臭，烨然若神人；余则缊袍敝衣处其间，略无慕艳意，以中有足乐者，不知口体之奉不若人也。盖余之勤且艰若此。今虽耄老，未有所成，犹幸预君子之列，而承天子之宠光，缀公卿之后，日侍坐备顾问，四海亦谬称其氏名，况才之过于余者乎？</p>\n<p>   今诸生学于太学，县官日有廪稍之供，父母岁有裘葛之遗，无冻馁之患矣；坐大厦之下而诵诗书，无奔走之劳矣；有司业、博士为之师，未有问而不告、求而不得者也；凡所宜有之书，皆集于此，不必若余之手录，假诸人而后见也。其业有不精、德有不成者，非天质之卑，则心不若余之专耳，岂他人之过哉！</p>\n<p>   东阳马生君则，在太学已二年，流辈甚称其贤。余朝京师，生以乡人子谒余，撰长书以为贽，辞甚畅达。与之论辨，言和而色夷。自谓少时用心于学甚劳，是可谓善学者矣。其将归见其亲也，余故道为学之难以告之。谓余勉乡人以学者，余之志也；诋我夸际遇之盛而骄乡人者，岂知予者哉！</p>\n</font>\n</font>"}],"PostAsset":[],"PostCategory":[{"post_id":"clwnoxp0i0001zsuh7crtah3w","category_id":"clwnoxp0m0004zsuhbxgb6gpd","_id":"clwnoxp0p000bzsuhetai4z04"},{"post_id":"clwnoxp0k0003zsuhaav52fmx","category_id":"clwnoxp0m0004zsuhbxgb6gpd","_id":"clwnoxp0p000ezsuh9w1h7i8j"},{"post_id":"clwnoxp0n0007zsuh87rpa1j3","category_id":"clwnoxp0p000azsuh0f0a3t9i","_id":"clwnoxp0q000hzsuhheeg2xzz"}],"PostTag":[{"post_id":"clwnoxp0i0001zsuh7crtah3w","tag_id":"clwnoxp0m0005zsuh918l86a4","_id":"clwnoxp0p000dzsuhc53y0zuu"},{"post_id":"clwnoxp0i0001zsuh7crtah3w","tag_id":"clwnoxp0o0009zsuh3ilegyhz","_id":"clwnoxp0p000fzsuhh25d79yq"},{"post_id":"clwnoxp0k0003zsuhaav52fmx","tag_id":"clwnoxp0m0005zsuh918l86a4","_id":"clwnoxp0q000jzsuh6h3hajit"},{"post_id":"clwnoxp0k0003zsuhaav52fmx","tag_id":"clwnoxp0p000gzsuh55782l3t","_id":"clwnoxp0q000kzsuh117o6f4a"},{"post_id":"clwnoxp0n0007zsuh87rpa1j3","tag_id":"clwnoxp0q000izsuhcx1p5tw7","_id":"clwnoxp0q000mzsuh6env088d"},{"post_id":"clwnoxp0n0007zsuh87rpa1j3","tag_id":"clwnoxp0q000lzsuh81y1fhum","_id":"clwnoxp0q000nzsuhfiphgpxf"}],"Tag":[{"name":"程序设计","_id":"clwnoxp0m0005zsuh918l86a4"},{"name":"C语言","_id":"clwnoxp0o0009zsuh3ilegyhz"},{"name":"Java","_id":"clwnoxp0p000gzsuh55782l3t"},{"name":"文学","_id":"clwnoxp0q000izsuhcx1p5tw7"},{"name":"生活","_id":"clwnoxp0q000lzsuh81y1fhum"}]}}